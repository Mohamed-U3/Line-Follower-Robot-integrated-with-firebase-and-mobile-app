
hello1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003240  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800334c  0800334c  0001334c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003374  08003374  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003374  08003374  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003374  08003374  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003374  08003374  00013374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003378  08003378  00013378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800337c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  2000000c  08003388  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08003388  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c03a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c07  00000000  00000000  0002c06f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  0002dc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d30  00000000  00000000  0002ea50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e74  00000000  00000000  0002f780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db0b  00000000  00000000  000475f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c24b  00000000  00000000  000550ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e134a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a68  00000000  00000000  000e139c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003334 	.word	0x08003334

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003334 	.word	0x08003334

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fff3 	bl	800113c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f9d9 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fb8d 	bl	8000878 <MX_GPIO_Init>
  MX_TIM2_Init();
 800015e:	f000 fa47 	bl	80005f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000162:	f000 fadb 	bl	800071c <MX_TIM3_Init>
  MX_SPI1_Init();
 8000166:	f000 fa0d 	bl	8000584 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800016a:	f000 fb59 	bl	8000820 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  MFRC522_Init();
 800016e:	f000 fccb 	bl	8000b08 <MFRC522_Init>
  char buffer[14]= " ";
 8000172:	2320      	movs	r3, #32
 8000174:	60bb      	str	r3, [r7, #8]
 8000176:	f107 030c 	add.w	r3, r7, #12
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
 800017e:	605a      	str	r2, [r3, #4]
 8000180:	811a      	strh	r2, [r3, #8]
  char input_pin[1]= " ";
 8000182:	2320      	movs	r3, #32
 8000184:	713b      	strb	r3, [r7, #4]
  int flag=0;
 8000186:	2300      	movs	r3, #0
 8000188:	61fb      	str	r3, [r7, #28]
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800018a:	2104      	movs	r1, #4
 800018c:	48a0      	ldr	r0, [pc, #640]	; (8000410 <main+0x2c4>)
 800018e:	f002 fa81 	bl	8002694 <HAL_TIM_PWM_Start>
      char left1,right1,left2,right2;
      HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000192:	2108      	movs	r1, #8
 8000194:	489e      	ldr	r0, [pc, #632]	; (8000410 <main+0x2c4>)
 8000196:	f002 fa7d 	bl	8002694 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800019a:	2100      	movs	r1, #0
 800019c:	489c      	ldr	r0, [pc, #624]	; (8000410 <main+0x2c4>)
 800019e:	f002 fa79 	bl	8002694 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80001a2:	210c      	movs	r1, #12
 80001a4:	489a      	ldr	r0, [pc, #616]	; (8000410 <main+0x2c4>)
 80001a6:	f002 fa75 	bl	8002694 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80001aa:	2104      	movs	r1, #4
 80001ac:	4899      	ldr	r0, [pc, #612]	; (8000414 <main+0x2c8>)
 80001ae:	f002 fa71 	bl	8002694 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80001b2:	210c      	movs	r1, #12
 80001b4:	4897      	ldr	r0, [pc, #604]	; (8000414 <main+0x2c8>)
 80001b6:	f002 fa6d 	bl	8002694 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  status = MFRC522_Request(PICC_REQIDL, str);	//MFRC522_Request(0x26, str)
 80001ba:	4997      	ldr	r1, [pc, #604]	; (8000418 <main+0x2cc>)
 80001bc:	2026      	movs	r0, #38	; 0x26
 80001be:	f000 fd9a 	bl	8000cf6 <MFRC522_Request>
 80001c2:	4603      	mov	r3, r0
 80001c4:	461a      	mov	r2, r3
 80001c6:	4b95      	ldr	r3, [pc, #596]	; (800041c <main+0x2d0>)
 80001c8:	701a      	strb	r2, [r3, #0]
	        	status = MFRC522_Anticoll(str);//Take a collision, look up 5 bytes
 80001ca:	4893      	ldr	r0, [pc, #588]	; (8000418 <main+0x2cc>)
 80001cc:	f000 fdb8 	bl	8000d40 <MFRC522_Anticoll>
 80001d0:	4603      	mov	r3, r0
 80001d2:	461a      	mov	r2, r3
 80001d4:	4b91      	ldr	r3, [pc, #580]	; (800041c <main+0x2d0>)
 80001d6:	701a      	strb	r2, [r3, #0]
	        	memcpy(serNum, str, 5);//function for c language:(para1:that place save data,para2:the the source of data,para3:size)
 80001d8:	4b91      	ldr	r3, [pc, #580]	; (8000420 <main+0x2d4>)
 80001da:	4a8f      	ldr	r2, [pc, #572]	; (8000418 <main+0x2cc>)
 80001dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001e0:	6018      	str	r0, [r3, #0]
 80001e2:	3304      	adds	r3, #4
 80001e4:	7019      	strb	r1, [r3, #0]
	        	left1=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 80001e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ea:	488e      	ldr	r0, [pc, #568]	; (8000424 <main+0x2d8>)
 80001ec:	f001 fa94 	bl	8001718 <HAL_GPIO_ReadPin>
 80001f0:	4603      	mov	r3, r0
 80001f2:	76fb      	strb	r3, [r7, #27]
	        	right1=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 80001f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001f8:	488a      	ldr	r0, [pc, #552]	; (8000424 <main+0x2d8>)
 80001fa:	f001 fa8d 	bl	8001718 <HAL_GPIO_ReadPin>
 80001fe:	4603      	mov	r3, r0
 8000200:	76bb      	strb	r3, [r7, #26]
	        	left2=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8000202:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000206:	4887      	ldr	r0, [pc, #540]	; (8000424 <main+0x2d8>)
 8000208:	f001 fa86 	bl	8001718 <HAL_GPIO_ReadPin>
 800020c:	4603      	mov	r3, r0
 800020e:	767b      	strb	r3, [r7, #25]
	        	right2=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8000210:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000214:	4883      	ldr	r0, [pc, #524]	; (8000424 <main+0x2d8>)
 8000216:	f001 fa7f 	bl	8001718 <HAL_GPIO_ReadPin>
 800021a:	4603      	mov	r3, r0
 800021c:	763b      	strb	r3, [r7, #24]
	        	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,1);
 800021e:	2201      	movs	r2, #1
 8000220:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000224:	4880      	ldr	r0, [pc, #512]	; (8000428 <main+0x2dc>)
 8000226:	f001 fa8e 	bl	8001746 <HAL_GPIO_WritePin>
	        		    		   HAL_Delay(300);
 800022a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800022e:	f000 ffe7 	bl	8001200 <HAL_Delay>
	        		    		   HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,0);
 8000232:	2200      	movs	r2, #0
 8000234:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000238:	487b      	ldr	r0, [pc, #492]	; (8000428 <main+0x2dc>)
 800023a:	f001 fa84 	bl	8001746 <HAL_GPIO_WritePin>
	        		    		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 800023e:	2201      	movs	r2, #1
 8000240:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000244:	4879      	ldr	r0, [pc, #484]	; (800042c <main+0x2e0>)
 8000246:	f001 fa7e 	bl	8001746 <HAL_GPIO_WritePin>
	        		    		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 800024a:	2201      	movs	r2, #1
 800024c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000250:	4876      	ldr	r0, [pc, #472]	; (800042c <main+0x2e0>)
 8000252:	f001 fa78 	bl	8001746 <HAL_GPIO_WritePin>

	        		    		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000256:	2201      	movs	r2, #1
 8000258:	f44f 7180 	mov.w	r1, #256	; 0x100
 800025c:	4873      	ldr	r0, [pc, #460]	; (800042c <main+0x2e0>)
 800025e:	f001 fa72 	bl	8001746 <HAL_GPIO_WritePin>
	        		    		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8000262:	2201      	movs	r2, #1
 8000264:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000268:	4870      	ldr	r0, [pc, #448]	; (800042c <main+0x2e0>)
 800026a:	f001 fa6c 	bl	8001746 <HAL_GPIO_WritePin>





	        	if((str[0]==0x74) && (str[1]==0x36) && (str[2]==0x61) && (str[3]==0x64) && flag==0 )
 800026e:	4b6a      	ldr	r3, [pc, #424]	; (8000418 <main+0x2cc>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	2b74      	cmp	r3, #116	; 0x74
 8000274:	d135      	bne.n	80002e2 <main+0x196>
 8000276:	4b68      	ldr	r3, [pc, #416]	; (8000418 <main+0x2cc>)
 8000278:	785b      	ldrb	r3, [r3, #1]
 800027a:	2b36      	cmp	r3, #54	; 0x36
 800027c:	d131      	bne.n	80002e2 <main+0x196>
 800027e:	4b66      	ldr	r3, [pc, #408]	; (8000418 <main+0x2cc>)
 8000280:	789b      	ldrb	r3, [r3, #2]
 8000282:	2b61      	cmp	r3, #97	; 0x61
 8000284:	d12d      	bne.n	80002e2 <main+0x196>
 8000286:	4b64      	ldr	r3, [pc, #400]	; (8000418 <main+0x2cc>)
 8000288:	78db      	ldrb	r3, [r3, #3]
 800028a:	2b64      	cmp	r3, #100	; 0x64
 800028c:	d129      	bne.n	80002e2 <main+0x196>
 800028e:	69fb      	ldr	r3, [r7, #28]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d126      	bne.n	80002e2 <main+0x196>
	        	{
	    		   HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,1);
 8000294:	2201      	movs	r2, #1
 8000296:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800029a:	4863      	ldr	r0, [pc, #396]	; (8000428 <main+0x2dc>)
 800029c:	f001 fa53 	bl	8001746 <HAL_GPIO_WritePin>
	    		   HAL_Delay(300);
 80002a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80002a4:	f000 ffac 	bl	8001200 <HAL_Delay>
	    		   HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,0);
 80002a8:	2200      	movs	r2, #0
 80002aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002ae:	485e      	ldr	r0, [pc, #376]	; (8000428 <main+0x2dc>)
 80002b0:	f001 fa49 	bl	8001746 <HAL_GPIO_WritePin>
	     	  		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 0);
 80002b4:	4b56      	ldr	r3, [pc, #344]	; (8000410 <main+0x2c4>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	2200      	movs	r2, #0
 80002ba:	635a      	str	r2, [r3, #52]	; 0x34
	     	  		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 0);
 80002bc:	4b54      	ldr	r3, [pc, #336]	; (8000410 <main+0x2c4>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2200      	movs	r2, #0
 80002c2:	639a      	str	r2, [r3, #56]	; 0x38
	     	  		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 80002c4:	4b53      	ldr	r3, [pc, #332]	; (8000414 <main+0x2c8>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	2200      	movs	r2, #0
 80002ca:	639a      	str	r2, [r3, #56]	; 0x38
	     	  		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 0);
 80002cc:	4b51      	ldr	r3, [pc, #324]	; (8000414 <main+0x2c8>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2200      	movs	r2, #0
 80002d2:	641a      	str	r2, [r3, #64]	; 0x40
	               MFRC522_Init();
 80002d4:	f000 fc18 	bl	8000b08 <MFRC522_Init>
	              HAL_Delay(5000); /* Timer is supposed to be here */
 80002d8:	f241 3088 	movw	r0, #5000	; 0x1388
 80002dc:	f000 ff90 	bl	8001200 <HAL_Delay>
	              flag==1;
 80002e0:	e064      	b.n	80003ac <main+0x260>

	        	}
	        	else {         HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,0);
 80002e2:	2200      	movs	r2, #0
 80002e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002e8:	484f      	ldr	r0, [pc, #316]	; (8000428 <main+0x2dc>)
 80002ea:	f001 fa2c 	bl	8001746 <HAL_GPIO_WritePin>

	        	        	                        if(left1==0&&right1==0)
 80002ee:	7efb      	ldrb	r3, [r7, #27]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d113      	bne.n	800031c <main+0x1d0>
 80002f4:	7ebb      	ldrb	r3, [r7, #26]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d110      	bne.n	800031c <main+0x1d0>
	        	        	      	    	  		{


	        	        	                        	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 250);
 80002fa:	4b45      	ldr	r3, [pc, #276]	; (8000410 <main+0x2c4>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	22fa      	movs	r2, #250	; 0xfa
 8000300:	635a      	str	r2, [r3, #52]	; 0x34
	        	        	      	    	  	        __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 0);
 8000302:	4b43      	ldr	r3, [pc, #268]	; (8000410 <main+0x2c4>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	2200      	movs	r2, #0
 8000308:	639a      	str	r2, [r3, #56]	; 0x38
	        	        	      	    	  	        __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 250);
 800030a:	4b42      	ldr	r3, [pc, #264]	; (8000414 <main+0x2c8>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	22fa      	movs	r2, #250	; 0xfa
 8000310:	639a      	str	r2, [r3, #56]	; 0x38
	        	        	      	    	       	    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 0);
 8000312:	4b40      	ldr	r3, [pc, #256]	; (8000414 <main+0x2c8>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	2200      	movs	r2, #0
 8000318:	641a      	str	r2, [r3, #64]	; 0x40
 800031a:	e047      	b.n	80003ac <main+0x260>


	        	        	      	    	  		}
	        	        	      	    	  		else if(left1==1&&right1==1)
 800031c:	7efb      	ldrb	r3, [r7, #27]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d113      	bne.n	800034a <main+0x1fe>
 8000322:	7ebb      	ldrb	r3, [r7, #26]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d110      	bne.n	800034a <main+0x1fe>
	        	        	      	    	  		{



	        	        	      	    	  		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 0);
 8000328:	4b39      	ldr	r3, [pc, #228]	; (8000410 <main+0x2c4>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	2200      	movs	r2, #0
 800032e:	635a      	str	r2, [r3, #52]	; 0x34
	        	        	      	    	  		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 0);
 8000330:	4b37      	ldr	r3, [pc, #220]	; (8000410 <main+0x2c4>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2200      	movs	r2, #0
 8000336:	639a      	str	r2, [r3, #56]	; 0x38
	        	        	      	    	  		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 8000338:	4b36      	ldr	r3, [pc, #216]	; (8000414 <main+0x2c8>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2200      	movs	r2, #0
 800033e:	639a      	str	r2, [r3, #56]	; 0x38
	        	        	      	    	  		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 0);
 8000340:	4b34      	ldr	r3, [pc, #208]	; (8000414 <main+0x2c8>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2200      	movs	r2, #0
 8000346:	641a      	str	r2, [r3, #64]	; 0x40
 8000348:	e030      	b.n	80003ac <main+0x260>

	        	        	      	    	  		}
	        	        	      	    	  		else if(left1==1&&right1==0)
 800034a:	7efb      	ldrb	r3, [r7, #27]
 800034c:	2b01      	cmp	r3, #1
 800034e:	d115      	bne.n	800037c <main+0x230>
 8000350:	7ebb      	ldrb	r3, [r7, #26]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d112      	bne.n	800037c <main+0x230>
	        	        	      	    	  		{


	        	        	                        	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 350);
 8000356:	4b2e      	ldr	r3, [pc, #184]	; (8000410 <main+0x2c4>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800035e:	635a      	str	r2, [r3, #52]	; 0x34
	        	        	      	    	  	        __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 0);
 8000360:	4b2b      	ldr	r3, [pc, #172]	; (8000410 <main+0x2c4>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2200      	movs	r2, #0
 8000366:	639a      	str	r2, [r3, #56]	; 0x38
	        	        	      	    	  	        __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 8000368:	4b2a      	ldr	r3, [pc, #168]	; (8000414 <main+0x2c8>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2200      	movs	r2, #0
 800036e:	639a      	str	r2, [r3, #56]	; 0x38
	        	        	      	    	       	    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 350);
 8000370:	4b28      	ldr	r3, [pc, #160]	; (8000414 <main+0x2c8>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8000378:	641a      	str	r2, [r3, #64]	; 0x40
 800037a:	e017      	b.n	80003ac <main+0x260>


	        	        	      	    	  		}
	        	        	      	    	  		else if(left1==0&&right1==1)
 800037c:	7efb      	ldrb	r3, [r7, #27]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d114      	bne.n	80003ac <main+0x260>
 8000382:	7ebb      	ldrb	r3, [r7, #26]
 8000384:	2b01      	cmp	r3, #1
 8000386:	d111      	bne.n	80003ac <main+0x260>
	        	        	      	    	  		{


	        	        	                        	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 0);
 8000388:	4b21      	ldr	r3, [pc, #132]	; (8000410 <main+0x2c4>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2200      	movs	r2, #0
 800038e:	635a      	str	r2, [r3, #52]	; 0x34
	        	        	      	    	  	        __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 350);
 8000390:	4b1f      	ldr	r3, [pc, #124]	; (8000410 <main+0x2c4>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8000398:	639a      	str	r2, [r3, #56]	; 0x38
	        	        	      	    	  	        __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 350);
 800039a:	4b1e      	ldr	r3, [pc, #120]	; (8000414 <main+0x2c8>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80003a2:	639a      	str	r2, [r3, #56]	; 0x38
	        	        	      	    	       	    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 0);
 80003a4:	4b1b      	ldr	r3, [pc, #108]	; (8000414 <main+0x2c8>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2200      	movs	r2, #0
 80003aa:	641a      	str	r2, [r3, #64]	; 0x40


	        	        	      	    	  		}

	        						}
	        	if((str[0]==0x64) && (str[1]==0x00) && (str[2]==0x96) && (str[3]==0x64) && flag==1 )
 80003ac:	4b1a      	ldr	r3, [pc, #104]	; (8000418 <main+0x2cc>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b64      	cmp	r3, #100	; 0x64
 80003b2:	d13d      	bne.n	8000430 <main+0x2e4>
 80003b4:	4b18      	ldr	r3, [pc, #96]	; (8000418 <main+0x2cc>)
 80003b6:	785b      	ldrb	r3, [r3, #1]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d139      	bne.n	8000430 <main+0x2e4>
 80003bc:	4b16      	ldr	r3, [pc, #88]	; (8000418 <main+0x2cc>)
 80003be:	789b      	ldrb	r3, [r3, #2]
 80003c0:	2b96      	cmp	r3, #150	; 0x96
 80003c2:	d135      	bne.n	8000430 <main+0x2e4>
 80003c4:	4b14      	ldr	r3, [pc, #80]	; (8000418 <main+0x2cc>)
 80003c6:	78db      	ldrb	r3, [r3, #3]
 80003c8:	2b64      	cmp	r3, #100	; 0x64
 80003ca:	d131      	bne.n	8000430 <main+0x2e4>
 80003cc:	69fb      	ldr	r3, [r7, #28]
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d12e      	bne.n	8000430 <main+0x2e4>
	        		                          	{

	        		                      		   HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,0);
 80003d2:	2200      	movs	r2, #0
 80003d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d8:	4813      	ldr	r0, [pc, #76]	; (8000428 <main+0x2dc>)
 80003da:	f001 f9b4 	bl	8001746 <HAL_GPIO_WritePin>
	        		                       	  		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 0);
 80003de:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <main+0x2c4>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	2200      	movs	r2, #0
 80003e4:	635a      	str	r2, [r3, #52]	; 0x34
	        		                       	  		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 0);
 80003e6:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <main+0x2c4>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	2200      	movs	r2, #0
 80003ec:	639a      	str	r2, [r3, #56]	; 0x38
	        		                       	  		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 80003ee:	4b09      	ldr	r3, [pc, #36]	; (8000414 <main+0x2c8>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	2200      	movs	r2, #0
 80003f4:	639a      	str	r2, [r3, #56]	; 0x38
	        		                       	  		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 0);
 80003f6:	4b07      	ldr	r3, [pc, #28]	; (8000414 <main+0x2c8>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	2200      	movs	r2, #0
 80003fc:	641a      	str	r2, [r3, #64]	; 0x40
	        		                                 MFRC522_Init();
 80003fe:	f000 fb83 	bl	8000b08 <MFRC522_Init>
	        		                                HAL_Delay(2000); /* Timer is supposed to be here */
 8000402:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000406:	f000 fefb 	bl	8001200 <HAL_Delay>
	        		                                flag=0;
 800040a:	2300      	movs	r3, #0
 800040c:	61fb      	str	r3, [r7, #28]
 800040e:	e076      	b.n	80004fe <main+0x3b2>
 8000410:	2000009c 	.word	0x2000009c
 8000414:	200000e4 	.word	0x200000e4
 8000418:	2000002c 	.word	0x2000002c
 800041c:	20000028 	.word	0x20000028
 8000420:	2000003c 	.word	0x2000003c
 8000424:	40010c00 	.word	0x40010c00
 8000428:	40011000 	.word	0x40011000
 800042c:	40010800 	.word	0x40010800


	        		                          	}
	        		                     else {
	        		                          		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,1);
 8000430:	2201      	movs	r2, #1
 8000432:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000436:	4832      	ldr	r0, [pc, #200]	; (8000500 <main+0x3b4>)
 8000438:	f001 f985 	bl	8001746 <HAL_GPIO_WritePin>
	        		                          	        	               if(left2==0&&right2==0)
 800043c:	7e7b      	ldrb	r3, [r7, #25]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d113      	bne.n	800046a <main+0x31e>
 8000442:	7e3b      	ldrb	r3, [r7, #24]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d110      	bne.n	800046a <main+0x31e>
	        		                          	        	      	    	  		{


	        		                          	        	                        	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 0);
 8000448:	4b2e      	ldr	r3, [pc, #184]	; (8000504 <main+0x3b8>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	2200      	movs	r2, #0
 800044e:	635a      	str	r2, [r3, #52]	; 0x34
	        		                          	        	      	    	  	        __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 250);
 8000450:	4b2c      	ldr	r3, [pc, #176]	; (8000504 <main+0x3b8>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	22fa      	movs	r2, #250	; 0xfa
 8000456:	639a      	str	r2, [r3, #56]	; 0x38
	        		                          	        	      	    	  	        __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 8000458:	4b2b      	ldr	r3, [pc, #172]	; (8000508 <main+0x3bc>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2200      	movs	r2, #0
 800045e:	639a      	str	r2, [r3, #56]	; 0x38
	        		                          	        	      	    	       	    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 250);
 8000460:	4b29      	ldr	r3, [pc, #164]	; (8000508 <main+0x3bc>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	22fa      	movs	r2, #250	; 0xfa
 8000466:	641a      	str	r2, [r3, #64]	; 0x40
 8000468:	e049      	b.n	80004fe <main+0x3b2>


	        		                          	        	      	    	  		}
	        		                          	        	      	    	  		else if(left2==1&&right2==1)
 800046a:	7e7b      	ldrb	r3, [r7, #25]
 800046c:	2b01      	cmp	r3, #1
 800046e:	d113      	bne.n	8000498 <main+0x34c>
 8000470:	7e3b      	ldrb	r3, [r7, #24]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d110      	bne.n	8000498 <main+0x34c>
	        		                          	        	      	    	  		{
	        		                          	        	      	    	  		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 0);
 8000476:	4b23      	ldr	r3, [pc, #140]	; (8000504 <main+0x3b8>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	2200      	movs	r2, #0
 800047c:	635a      	str	r2, [r3, #52]	; 0x34
	        		                          	        	      	    	  		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 0);
 800047e:	4b21      	ldr	r3, [pc, #132]	; (8000504 <main+0x3b8>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	2200      	movs	r2, #0
 8000484:	639a      	str	r2, [r3, #56]	; 0x38
	        		                          	        	      	    	  		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 8000486:	4b20      	ldr	r3, [pc, #128]	; (8000508 <main+0x3bc>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	2200      	movs	r2, #0
 800048c:	639a      	str	r2, [r3, #56]	; 0x38
	        		                          	        	      	    	  		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 0);
 800048e:	4b1e      	ldr	r3, [pc, #120]	; (8000508 <main+0x3bc>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	2200      	movs	r2, #0
 8000494:	641a      	str	r2, [r3, #64]	; 0x40
 8000496:	e032      	b.n	80004fe <main+0x3b2>

	        		                          	        	      	    	  		}
	        		                          	        	      	    	  		else if(left2==1&&right2==0)
 8000498:	7e7b      	ldrb	r3, [r7, #25]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d115      	bne.n	80004ca <main+0x37e>
 800049e:	7e3b      	ldrb	r3, [r7, #24]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d112      	bne.n	80004ca <main+0x37e>
	        		                          	        	      	    	  		{


	        		                          	        	                        	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 0);
 80004a4:	4b17      	ldr	r3, [pc, #92]	; (8000504 <main+0x3b8>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2200      	movs	r2, #0
 80004aa:	635a      	str	r2, [r3, #52]	; 0x34
	        		                          	        	      	    	  	        __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 350);
 80004ac:	4b15      	ldr	r3, [pc, #84]	; (8000504 <main+0x3b8>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80004b4:	639a      	str	r2, [r3, #56]	; 0x38
	        		                          	        	      	    	  	        __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 350);
 80004b6:	4b14      	ldr	r3, [pc, #80]	; (8000508 <main+0x3bc>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80004be:	639a      	str	r2, [r3, #56]	; 0x38
	        		                          	        	      	    	       	    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 0);
 80004c0:	4b11      	ldr	r3, [pc, #68]	; (8000508 <main+0x3bc>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2200      	movs	r2, #0
 80004c6:	641a      	str	r2, [r3, #64]	; 0x40
 80004c8:	e019      	b.n	80004fe <main+0x3b2>

	        		                          	        	      	    	  		}
	        		                          	        	      	    	  		else if(left2==0&&right2==1)
 80004ca:	7e7b      	ldrb	r3, [r7, #25]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	f47f ae74 	bne.w	80001ba <main+0x6e>
 80004d2:	7e3b      	ldrb	r3, [r7, #24]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	f47f ae70 	bne.w	80001ba <main+0x6e>
	        		                          	        	      	    	  		{

	        		                          	        	                        	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 350);
 80004da:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <main+0x3b8>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80004e2:	635a      	str	r2, [r3, #52]	; 0x34
	        		                          	        	      	    	  	        __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 0);
 80004e4:	4b07      	ldr	r3, [pc, #28]	; (8000504 <main+0x3b8>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2200      	movs	r2, #0
 80004ea:	639a      	str	r2, [r3, #56]	; 0x38
	        		                          	        	      	    	  	        __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <main+0x3bc>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2200      	movs	r2, #0
 80004f2:	639a      	str	r2, [r3, #56]	; 0x38
	        		                          	        	      	    	       	    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 350);
 80004f4:	4b04      	ldr	r3, [pc, #16]	; (8000508 <main+0x3bc>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80004fc:	641a      	str	r2, [r3, #64]	; 0x40
	  status = MFRC522_Request(PICC_REQIDL, str);	//MFRC522_Request(0x26, str)
 80004fe:	e65c      	b.n	80001ba <main+0x6e>
 8000500:	40011000 	.word	0x40011000
 8000504:	2000009c 	.word	0x2000009c
 8000508:	200000e4 	.word	0x200000e4

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b090      	sub	sp, #64	; 0x40
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0318 	add.w	r3, r7, #24
 8000516:	2228      	movs	r2, #40	; 0x28
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f002 ff02 	bl	8003324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800052e:	2302      	movs	r3, #2
 8000530:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000532:	2301      	movs	r3, #1
 8000534:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000536:	2310      	movs	r3, #16
 8000538:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800053a:	2300      	movs	r3, #0
 800053c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053e:	f107 0318 	add.w	r3, r7, #24
 8000542:	4618      	mov	r0, r3
 8000544:	f001 f918 	bl	8001778 <HAL_RCC_OscConfig>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800054e:	f000 fa23 	bl	8000998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000552:	230f      	movs	r3, #15
 8000554:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f001 fb86 	bl	8001c7c <HAL_RCC_ClockConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000576:	f000 fa0f 	bl	8000998 <Error_Handler>
  }
}
 800057a:	bf00      	nop
 800057c:	3740      	adds	r7, #64	; 0x40
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000588:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <MX_SPI1_Init+0x64>)
 800058a:	4a18      	ldr	r2, [pc, #96]	; (80005ec <MX_SPI1_Init+0x68>)
 800058c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800058e:	4b16      	ldr	r3, [pc, #88]	; (80005e8 <MX_SPI1_Init+0x64>)
 8000590:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000594:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000596:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <MX_SPI1_Init+0x64>)
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <MX_SPI1_Init+0x64>)
 800059e:	2200      	movs	r2, #0
 80005a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <MX_SPI1_Init+0x64>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005a8:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <MX_SPI1_Init+0x64>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <MX_SPI1_Init+0x64>)
 80005b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80005b6:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <MX_SPI1_Init+0x64>)
 80005b8:	2210      	movs	r2, #16
 80005ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005bc:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <MX_SPI1_Init+0x64>)
 80005be:	2200      	movs	r2, #0
 80005c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <MX_SPI1_Init+0x64>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <MX_SPI1_Init+0x64>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <MX_SPI1_Init+0x64>)
 80005d0:	220a      	movs	r2, #10
 80005d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005d4:	4804      	ldr	r0, [pc, #16]	; (80005e8 <MX_SPI1_Init+0x64>)
 80005d6:	f001 fce9 	bl	8001fac <HAL_SPI_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80005e0:	f000 f9da 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000044 	.word	0x20000044
 80005ec:	40013000 	.word	0x40013000

080005f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08e      	sub	sp, #56	; 0x38
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000604:	f107 0320 	add.w	r3, r7, #32
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
 800061c:	615a      	str	r2, [r3, #20]
 800061e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000620:	4b3d      	ldr	r3, [pc, #244]	; (8000718 <MX_TIM2_Init+0x128>)
 8000622:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000626:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 8000628:	4b3b      	ldr	r3, [pc, #236]	; (8000718 <MX_TIM2_Init+0x128>)
 800062a:	227f      	movs	r2, #127	; 0x7f
 800062c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800062e:	4b3a      	ldr	r3, [pc, #232]	; (8000718 <MX_TIM2_Init+0x128>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625;
 8000634:	4b38      	ldr	r3, [pc, #224]	; (8000718 <MX_TIM2_Init+0x128>)
 8000636:	f240 2271 	movw	r2, #625	; 0x271
 800063a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800063c:	4b36      	ldr	r3, [pc, #216]	; (8000718 <MX_TIM2_Init+0x128>)
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000642:	4b35      	ldr	r3, [pc, #212]	; (8000718 <MX_TIM2_Init+0x128>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000648:	4833      	ldr	r0, [pc, #204]	; (8000718 <MX_TIM2_Init+0x128>)
 800064a:	f001 ff7b 	bl	8002544 <HAL_TIM_Base_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000654:	f000 f9a0 	bl	8000998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800065e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000662:	4619      	mov	r1, r3
 8000664:	482c      	ldr	r0, [pc, #176]	; (8000718 <MX_TIM2_Init+0x128>)
 8000666:	f002 f975 	bl	8002954 <HAL_TIM_ConfigClockSource>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000670:	f000 f992 	bl	8000998 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000674:	4828      	ldr	r0, [pc, #160]	; (8000718 <MX_TIM2_Init+0x128>)
 8000676:	f001 ffb4 	bl	80025e2 <HAL_TIM_PWM_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000680:	f000 f98a 	bl	8000998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000684:	2300      	movs	r3, #0
 8000686:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800068c:	f107 0320 	add.w	r3, r7, #32
 8000690:	4619      	mov	r1, r3
 8000692:	4821      	ldr	r0, [pc, #132]	; (8000718 <MX_TIM2_Init+0x128>)
 8000694:	f002 fcc6 	bl	8003024 <HAL_TIMEx_MasterConfigSynchronization>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800069e:	f000 f97b 	bl	8000998 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006a2:	2360      	movs	r3, #96	; 0x60
 80006a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2200      	movs	r2, #0
 80006b6:	4619      	mov	r1, r3
 80006b8:	4817      	ldr	r0, [pc, #92]	; (8000718 <MX_TIM2_Init+0x128>)
 80006ba:	f002 f88d 	bl	80027d8 <HAL_TIM_PWM_ConfigChannel>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80006c4:	f000 f968 	bl	8000998 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2204      	movs	r2, #4
 80006cc:	4619      	mov	r1, r3
 80006ce:	4812      	ldr	r0, [pc, #72]	; (8000718 <MX_TIM2_Init+0x128>)
 80006d0:	f002 f882 	bl	80027d8 <HAL_TIM_PWM_ConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80006da:	f000 f95d 	bl	8000998 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2208      	movs	r2, #8
 80006e2:	4619      	mov	r1, r3
 80006e4:	480c      	ldr	r0, [pc, #48]	; (8000718 <MX_TIM2_Init+0x128>)
 80006e6:	f002 f877 	bl	80027d8 <HAL_TIM_PWM_ConfigChannel>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80006f0:	f000 f952 	bl	8000998 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	220c      	movs	r2, #12
 80006f8:	4619      	mov	r1, r3
 80006fa:	4807      	ldr	r0, [pc, #28]	; (8000718 <MX_TIM2_Init+0x128>)
 80006fc:	f002 f86c 	bl	80027d8 <HAL_TIM_PWM_ConfigChannel>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8000706:	f000 f947 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800070a:	4803      	ldr	r0, [pc, #12]	; (8000718 <MX_TIM2_Init+0x128>)
 800070c:	f000 fc02 	bl	8000f14 <HAL_TIM_MspPostInit>

}
 8000710:	bf00      	nop
 8000712:	3738      	adds	r7, #56	; 0x38
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2000009c 	.word	0x2000009c

0800071c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08e      	sub	sp, #56	; 0x38
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000722:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000730:	f107 0320 	add.w	r3, r7, #32
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
 8000748:	615a      	str	r2, [r3, #20]
 800074a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800074c:	4b32      	ldr	r3, [pc, #200]	; (8000818 <MX_TIM3_Init+0xfc>)
 800074e:	4a33      	ldr	r2, [pc, #204]	; (800081c <MX_TIM3_Init+0x100>)
 8000750:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 127;
 8000752:	4b31      	ldr	r3, [pc, #196]	; (8000818 <MX_TIM3_Init+0xfc>)
 8000754:	227f      	movs	r2, #127	; 0x7f
 8000756:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000758:	4b2f      	ldr	r3, [pc, #188]	; (8000818 <MX_TIM3_Init+0xfc>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 625;
 800075e:	4b2e      	ldr	r3, [pc, #184]	; (8000818 <MX_TIM3_Init+0xfc>)
 8000760:	f240 2271 	movw	r2, #625	; 0x271
 8000764:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000766:	4b2c      	ldr	r3, [pc, #176]	; (8000818 <MX_TIM3_Init+0xfc>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800076c:	4b2a      	ldr	r3, [pc, #168]	; (8000818 <MX_TIM3_Init+0xfc>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000772:	4829      	ldr	r0, [pc, #164]	; (8000818 <MX_TIM3_Init+0xfc>)
 8000774:	f001 fee6 	bl	8002544 <HAL_TIM_Base_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800077e:	f000 f90b 	bl	8000998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000786:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000788:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800078c:	4619      	mov	r1, r3
 800078e:	4822      	ldr	r0, [pc, #136]	; (8000818 <MX_TIM3_Init+0xfc>)
 8000790:	f002 f8e0 	bl	8002954 <HAL_TIM_ConfigClockSource>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800079a:	f000 f8fd 	bl	8000998 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800079e:	481e      	ldr	r0, [pc, #120]	; (8000818 <MX_TIM3_Init+0xfc>)
 80007a0:	f001 ff1f 	bl	80025e2 <HAL_TIM_PWM_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80007aa:	f000 f8f5 	bl	8000998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ae:	2300      	movs	r3, #0
 80007b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	4619      	mov	r1, r3
 80007bc:	4816      	ldr	r0, [pc, #88]	; (8000818 <MX_TIM3_Init+0xfc>)
 80007be:	f002 fc31 	bl	8003024 <HAL_TIMEx_MasterConfigSynchronization>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80007c8:	f000 f8e6 	bl	8000998 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007cc:	2360      	movs	r3, #96	; 0x60
 80007ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2204      	movs	r2, #4
 80007e0:	4619      	mov	r1, r3
 80007e2:	480d      	ldr	r0, [pc, #52]	; (8000818 <MX_TIM3_Init+0xfc>)
 80007e4:	f001 fff8 	bl	80027d8 <HAL_TIM_PWM_ConfigChannel>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80007ee:	f000 f8d3 	bl	8000998 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	220c      	movs	r2, #12
 80007f6:	4619      	mov	r1, r3
 80007f8:	4807      	ldr	r0, [pc, #28]	; (8000818 <MX_TIM3_Init+0xfc>)
 80007fa:	f001 ffed 	bl	80027d8 <HAL_TIM_PWM_ConfigChannel>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000804:	f000 f8c8 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000808:	4803      	ldr	r0, [pc, #12]	; (8000818 <MX_TIM3_Init+0xfc>)
 800080a:	f000 fb83 	bl	8000f14 <HAL_TIM_MspPostInit>

}
 800080e:	bf00      	nop
 8000810:	3738      	adds	r7, #56	; 0x38
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200000e4 	.word	0x200000e4
 800081c:	40000400 	.word	0x40000400

08000820 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <MX_USART1_UART_Init+0x50>)
 8000826:	4a13      	ldr	r2, [pc, #76]	; (8000874 <MX_USART1_UART_Init+0x54>)
 8000828:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_USART1_UART_Init+0x50>)
 800082c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000830:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_USART1_UART_Init+0x50>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <MX_USART1_UART_Init+0x50>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800083e:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_USART1_UART_Init+0x50>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <MX_USART1_UART_Init+0x50>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_USART1_UART_Init+0x50>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <MX_USART1_UART_Init+0x50>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_USART1_UART_Init+0x50>)
 800085c:	f002 fc40 	bl	80030e0 <HAL_MultiProcessor_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8000866:	f000 f897 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2000012c 	.word	0x2000012c
 8000874:	40013800 	.word	0x40013800

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 0310 	add.w	r3, r7, #16
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088c:	4b3e      	ldr	r3, [pc, #248]	; (8000988 <MX_GPIO_Init+0x110>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a3d      	ldr	r2, [pc, #244]	; (8000988 <MX_GPIO_Init+0x110>)
 8000892:	f043 0310 	orr.w	r3, r3, #16
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b3b      	ldr	r3, [pc, #236]	; (8000988 <MX_GPIO_Init+0x110>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f003 0310 	and.w	r3, r3, #16
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a4:	4b38      	ldr	r3, [pc, #224]	; (8000988 <MX_GPIO_Init+0x110>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4a37      	ldr	r2, [pc, #220]	; (8000988 <MX_GPIO_Init+0x110>)
 80008aa:	f043 0320 	orr.w	r3, r3, #32
 80008ae:	6193      	str	r3, [r2, #24]
 80008b0:	4b35      	ldr	r3, [pc, #212]	; (8000988 <MX_GPIO_Init+0x110>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f003 0320 	and.w	r3, r3, #32
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008bc:	4b32      	ldr	r3, [pc, #200]	; (8000988 <MX_GPIO_Init+0x110>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a31      	ldr	r2, [pc, #196]	; (8000988 <MX_GPIO_Init+0x110>)
 80008c2:	f043 0304 	orr.w	r3, r3, #4
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b2f      	ldr	r3, [pc, #188]	; (8000988 <MX_GPIO_Init+0x110>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f003 0304 	and.w	r3, r3, #4
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d4:	4b2c      	ldr	r3, [pc, #176]	; (8000988 <MX_GPIO_Init+0x110>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a2b      	ldr	r2, [pc, #172]	; (8000988 <MX_GPIO_Init+0x110>)
 80008da:	f043 0308 	orr.w	r3, r3, #8
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b29      	ldr	r3, [pc, #164]	; (8000988 <MX_GPIO_Init+0x110>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f003 0308 	and.w	r3, r3, #8
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008f2:	4826      	ldr	r0, [pc, #152]	; (800098c <MX_GPIO_Init+0x114>)
 80008f4:	f000 ff27 	bl	8001746 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80008f8:	2200      	movs	r2, #0
 80008fa:	f649 7110 	movw	r1, #40720	; 0x9f10
 80008fe:	4824      	ldr	r0, [pc, #144]	; (8000990 <MX_GPIO_Init+0x118>)
 8000900:	f000 ff21 	bl	8001746 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	2119      	movs	r1, #25
 8000908:	4822      	ldr	r0, [pc, #136]	; (8000994 <MX_GPIO_Init+0x11c>)
 800090a:	f000 ff1c 	bl	8001746 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800090e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000912:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2302      	movs	r3, #2
 800091e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000920:	f107 0310 	add.w	r3, r7, #16
 8000924:	4619      	mov	r1, r3
 8000926:	4819      	ldr	r0, [pc, #100]	; (800098c <MX_GPIO_Init+0x114>)
 8000928:	f000 fd72 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800092c:	f649 7310 	movw	r3, #40720	; 0x9f10
 8000930:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2302      	movs	r3, #2
 800093c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	f107 0310 	add.w	r3, r7, #16
 8000942:	4619      	mov	r1, r3
 8000944:	4812      	ldr	r0, [pc, #72]	; (8000990 <MX_GPIO_Init+0x118>)
 8000946:	f000 fd63 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 800094a:	2319      	movs	r3, #25
 800094c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2302      	movs	r3, #2
 8000958:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095a:	f107 0310 	add.w	r3, r7, #16
 800095e:	4619      	mov	r1, r3
 8000960:	480c      	ldr	r0, [pc, #48]	; (8000994 <MX_GPIO_Init+0x11c>)
 8000962:	f000 fd55 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000966:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800096a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000974:	f107 0310 	add.w	r3, r7, #16
 8000978:	4619      	mov	r1, r3
 800097a:	4806      	ldr	r0, [pc, #24]	; (8000994 <MX_GPIO_Init+0x11c>)
 800097c:	f000 fd48 	bl	8001410 <HAL_GPIO_Init>

}
 8000980:	bf00      	nop
 8000982:	3720      	adds	r7, #32
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40021000 	.word	0x40021000
 800098c:	40011000 	.word	0x40011000
 8000990:	40010800 	.word	0x40010800
 8000994:	40010c00 	.word	0x40010c00

08000998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800099c:	b672      	cpsid	i
}
 800099e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <Error_Handler+0x8>
	...

080009a4 <RC522_SPI_Transfer>:
 * Chuc nang: wait 1 byte is stored in register MFRC522
 * Input:addr-> I just wrote down, val-> Value to record
 * Check: No
 */
uint8_t RC522_SPI_Transfer(uint8_t data)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af02      	add	r7, sp, #8
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_data;
	HAL_SPI_TransmitReceive(&hspi1,&data,&rx_data,1,100);
 80009ae:	f107 020f 	add.w	r2, r7, #15
 80009b2:	1df9      	adds	r1, r7, #7
 80009b4:	2364      	movs	r3, #100	; 0x64
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	2301      	movs	r3, #1
 80009ba:	4804      	ldr	r0, [pc, #16]	; (80009cc <RC522_SPI_Transfer+0x28>)
 80009bc:	f001 fb7a 	bl	80020b4 <HAL_SPI_TransmitReceive>
	/*while(SPI_I2S_GetFlagStatus(MFRC522_SPI, SPI_I2S_FLAG_TXE)==RESET);
	SPI_I2S_SendData(MFRC522_SPI,data);

	while(SPI_I2S_GetFlagStatus(MFRC522_SPI, SPI_I2S_FLAG_RXNE)==RESET);
	return SPI_I2S_ReceiveData(MFRC522_SPI);*/
	return rx_data;
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000044 	.word	0x20000044

080009d0 <Write_MFRC522>:
 * Note: wait 1 byte is stored in register MFRC522
 * Input: addr-> DIa write only, val-> Value to write
 * Check: No
 */
void Write_MFRC522(uint8_t addr, uint8_t val)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	460a      	mov	r2, r1
 80009da:	71fb      	strb	r3, [r7, #7]
 80009dc:	4613      	mov	r3, r2
 80009de:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	//GPIO_ResetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2110      	movs	r1, #16
 80009e4:	480c      	ldr	r0, [pc, #48]	; (8000a18 <Write_MFRC522+0x48>)
 80009e6:	f000 feae 	bl	8001746 <HAL_GPIO_WritePin>
	//The address is located:0XXXXXX0
	RC522_SPI_Transfer((addr<<1)&0x7E);	
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ffd4 	bl	80009a4 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 80009fc:	79bb      	ldrb	r3, [r7, #6]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff ffd0 	bl	80009a4 <RC522_SPI_Transfer>
	
	/* CS HIGH */
	//GPIO_SetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	2110      	movs	r1, #16
 8000a08:	4803      	ldr	r0, [pc, #12]	; (8000a18 <Write_MFRC522+0x48>)
 8000a0a:	f000 fe9c 	bl	8001746 <HAL_GPIO_WritePin>
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40010800 	.word	0x40010800

08000a1c <Read_MFRC522>:
 * Note: A 1-byte doc is stored from a register MFRC522
 * Input: addr-> address doc
 * Look up: Value in the read register
 */
uint8_t Read_MFRC522(uint8_t addr)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	/* CS LOW */
	//GPIO_ResetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2110      	movs	r1, #16
 8000a2a:	480f      	ldr	r0, [pc, #60]	; (8000a68 <Read_MFRC522+0x4c>)
 8000a2c:	f000 fe8b 	bl	8001746 <HAL_GPIO_WritePin>

	//The address is located:1XXXXXX0
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);	
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	b25b      	sxtb	r3, r3
 8000a36:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000a3a:	b25b      	sxtb	r3, r3
 8000a3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a40:	b25b      	sxtb	r3, r3
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff ffad 	bl	80009a4 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f7ff ffaa 	bl	80009a4 <RC522_SPI_Transfer>
 8000a50:	4603      	mov	r3, r0
 8000a52:	73fb      	strb	r3, [r7, #15]
	
	/* CS HIGH */
	//GPIO_SetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	2110      	movs	r1, #16
 8000a58:	4803      	ldr	r0, [pc, #12]	; (8000a68 <Read_MFRC522+0x4c>)
 8000a5a:	f000 fe74 	bl	8001746 <HAL_GPIO_WritePin>
	return val;	
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
	
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40010800 	.word	0x40010800

08000a6c <SetBitMask>:
 * Note: Set bits in an MFRC522 register
 * Input: reg - Registers settings; mask - value set
 * Check: No
 */
void SetBitMask(uint8_t reg, uint8_t mask)  
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	460a      	mov	r2, r1
 8000a76:	71fb      	strb	r3, [r7, #7]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;
    tmp = Read_MFRC522(reg);
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff ffcc 	bl	8000a1c <Read_MFRC522>
 8000a84:	4603      	mov	r3, r0
 8000a86:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8000a88:	7bfa      	ldrb	r2, [r7, #15]
 8000a8a:	79bb      	ldrb	r3, [r7, #6]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	4611      	mov	r1, r2
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff9b 	bl	80009d0 <Write_MFRC522>
}
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <ClearBitMask>:
 * Note: Reset bit in register MFRC522
 * Input: reg - Dia register; mask - Value bit can clear
 * Check: No
 */
void ClearBitMask(uint8_t reg, uint8_t mask)  
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b084      	sub	sp, #16
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	460a      	mov	r2, r1
 8000aac:	71fb      	strb	r3, [r7, #7]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;
    tmp = Read_MFRC522(reg);
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff ffb1 	bl	8000a1c <Read_MFRC522>
 8000aba:	4603      	mov	r3, r0
 8000abc:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000abe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	b25a      	sxtb	r2, r3
 8000ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aca:	4013      	ands	r3, r2
 8000acc:	b25b      	sxtb	r3, r3
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ff7b 	bl	80009d0 <Write_MFRC522>
} 
 8000ada:	bf00      	nop
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <AntennaOn>:
 * Chuc Nang: Mo antenna, should have at least 1 ms
 * Input: no
 * Check: no
 */
void AntennaOn(void)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0
	

Read_MFRC522(TxControlReg);
 8000ae6:	2014      	movs	r0, #20
 8000ae8:	f7ff ff98 	bl	8000a1c <Read_MFRC522>
//	if (!(temp & 0x03))
//	{
//		SetBitMask(TxControlReg, 0x03);
//	}
	SetBitMask(TxControlReg, 0x03);
 8000aec:	2103      	movs	r1, #3
 8000aee:	2014      	movs	r0, #20
 8000af0:	f7ff ffbc 	bl	8000a6c <SetBitMask>
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <MFRC522_Reset>:
 * Look: Restart RC522
 * Input: No.
 * Return: No.
 */
void MFRC522_Reset(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8000afc:	210f      	movs	r1, #15
 8000afe:	2001      	movs	r0, #1
 8000b00:	f7ff ff66 	bl	80009d0 <Write_MFRC522>
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <MFRC522_Init>:
 * Start RC522
 * Input:  No.
 * Look up:  No.
 */
void MFRC522_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0

	//GPIO_SetBits(MFRC522_CS_GPIO,MFRC522_CS_PIN);						// Activate the RFID reader
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2110      	movs	r1, #16
 8000b10:	4812      	ldr	r0, [pc, #72]	; (8000b5c <MFRC522_Init+0x54>)
 8000b12:	f000 fe18 	bl	8001746 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2101      	movs	r1, #1
 8000b1a:	4811      	ldr	r0, [pc, #68]	; (8000b60 <MFRC522_Init+0x58>)
 8000b1c:	f000 fe13 	bl	8001746 <HAL_GPIO_WritePin>
	//GPIO_SetBits(MFRC522_RST_GPIO,MFRC522_RST_PIN);					// not reset

		// spi config
	//MFRC522_SPI_Init();
	
	MFRC522_Reset();
 8000b20:	f7ff ffea 	bl	8000af8 <MFRC522_Reset>
	 	
	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//auto=1; f(Timer) = 6.78MHz/TPreScaler
 8000b24:	218d      	movs	r1, #141	; 0x8d
 8000b26:	202a      	movs	r0, #42	; 0x2a
 8000b28:	f7ff ff52 	bl	80009d0 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8000b2c:	213e      	movs	r1, #62	; 0x3e
 8000b2e:	202b      	movs	r0, #43	; 0x2b
 8000b30:	f7ff ff4e 	bl	80009d0 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);           
 8000b34:	211e      	movs	r1, #30
 8000b36:	202d      	movs	r0, #45	; 0x2d
 8000b38:	f7ff ff4a 	bl	80009d0 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	202c      	movs	r0, #44	; 0x2c
 8000b40:	f7ff ff46 	bl	80009d0 <Write_MFRC522>
	
	Write_MFRC522(TxAutoReg, 0x40);		//100%ASK
 8000b44:	2140      	movs	r1, #64	; 0x40
 8000b46:	2015      	movs	r0, #21
 8000b48:	f7ff ff42 	bl	80009d0 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		//CRC Original value 0x6363	???
 8000b4c:	213d      	movs	r1, #61	; 0x3d
 8000b4e:	2011      	movs	r0, #17
 8000b50:	f7ff ff3e 	bl	80009d0 <Write_MFRC522>

	//ClearBitMask(Status2Reg, 0x08);		//MFCrypto1On=0
	//Write_MFRC522(RxSelReg, 0x86);		//RxWait = RxSelReg[5..0]
	//Write_MFRC522(RFCfgReg, 0x7F);   		//RxGain = 48dB

	AntennaOn();		//Mo Anten
 8000b54:	f7ff ffc5 	bl	8000ae2 <AntennaOn>
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40010800 	.word	0x40010800
 8000b60:	40010c00 	.word	0x40010c00

08000b64 <MFRC522_ToCard>:
 *			 backData - BackData is returned
 *			 backLen - Retrieve the data number
 * Check: MI_OK if successful
 */
uint8_t MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint16 *backLen)
{
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b089      	sub	sp, #36	; 0x24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4603      	mov	r3, r0
 8000b70:	73fb      	strb	r3, [r7, #15]
 8000b72:	4613      	mov	r3, r2
 8000b74:	73bb      	strb	r3, [r7, #14]
    uint8_t status = MI_ERR;
 8000b76:	2302      	movs	r3, #2
 8000b78:	77fb      	strb	r3, [r7, #31]
    uint8_t irqEn = 0x00;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	77bb      	strb	r3, [r7, #30]
    uint8_t waitIRq = 0x00;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	777b      	strb	r3, [r7, #29]
    uint8_t lastBits;
    uint8_t n;
    uint16 i;

    switch (command)
 8000b82:	7bfb      	ldrb	r3, [r7, #15]
 8000b84:	2b0c      	cmp	r3, #12
 8000b86:	d006      	beq.n	8000b96 <MFRC522_ToCard+0x32>
 8000b88:	2b0e      	cmp	r3, #14
 8000b8a:	d109      	bne.n	8000ba0 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		//Acknowledging the liver
		{
			irqEn = 0x12;
 8000b8c:	2312      	movs	r3, #18
 8000b8e:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8000b90:	2310      	movs	r3, #16
 8000b92:	777b      	strb	r3, [r7, #29]
			break;
 8000b94:	e005      	b.n	8000ba2 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// FIFO data collection
		{
			irqEn = 0x77;
 8000b96:	2377      	movs	r3, #119	; 0x77
 8000b98:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8000b9a:	2330      	movs	r3, #48	; 0x30
 8000b9c:	777b      	strb	r3, [r7, #29]
			break;
 8000b9e:	e000      	b.n	8000ba2 <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8000ba0:	bf00      	nop
    }
   
    Write_MFRC522(CommIEnReg, irqEn|0x80);	//Yeu cau ngat
 8000ba2:	7fbb      	ldrb	r3, [r7, #30]
 8000ba4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	4619      	mov	r1, r3
 8000bac:	2002      	movs	r0, #2
 8000bae:	f7ff ff0f 	bl	80009d0 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			//Clear all the bits
 8000bb2:	2180      	movs	r1, #128	; 0x80
 8000bb4:	2004      	movs	r0, #4
 8000bb6:	f7ff ff74 	bl	8000aa2 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			//FlushBuffer=1, FIFO
 8000bba:	2180      	movs	r1, #128	; 0x80
 8000bbc:	200a      	movs	r0, #10
 8000bbe:	f7ff ff55 	bl	8000a6c <SetBitMask>
    
	Write_MFRC522(CommandReg, PCD_IDLE);	//NO action; Huy bo lenh hien hanh	???
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	f7ff ff03 	bl	80009d0 <Write_MFRC522>

	// Record in FIFO
    for (i=0; i<sendLen; i++)
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61bb      	str	r3, [r7, #24]
 8000bce:	e00a      	b.n	8000be6 <MFRC522_ToCard+0x82>
    {   
		Write_MFRC522(FIFODataReg, sendData[i]);    
 8000bd0:	68ba      	ldr	r2, [r7, #8]
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	4619      	mov	r1, r3
 8000bda:	2009      	movs	r0, #9
 8000bdc:	f7ff fef8 	bl	80009d0 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	3301      	adds	r3, #1
 8000be4:	61bb      	str	r3, [r7, #24]
 8000be6:	7bbb      	ldrb	r3, [r7, #14]
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d3f0      	bcc.n	8000bd0 <MFRC522_ToCard+0x6c>
	}

	//chay
	Write_MFRC522(CommandReg, command);
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f7ff feec 	bl	80009d0 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
 8000bfa:	2b0c      	cmp	r3, #12
 8000bfc:	d103      	bne.n	8000c06 <MFRC522_ToCard+0xa2>
    {    
		SetBitMask(BitFramingReg, 0x80);		//StartSend=1,transmission of data starts  
 8000bfe:	2180      	movs	r1, #128	; 0x80
 8000c00:	200d      	movs	r0, #13
 8000c02:	f7ff ff33 	bl	8000a6c <SetBitMask>
	}   
    
	//The team is allowed to be stored
	i = 2000;	//i tuy thuoc tan so thach anh, thoi gian toi da cho the M1 la 25ms
 8000c06:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c0a:	61bb      	str	r3, [r7, #24]
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8000c0c:	2004      	movs	r0, #4
 8000c0e:	f7ff ff05 	bl	8000a1c <Read_MFRC522>
 8000c12:	4603      	mov	r3, r0
 8000c14:	773b      	strb	r3, [r7, #28]
        i--;
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d00a      	beq.n	8000c38 <MFRC522_ToCard+0xd4>
 8000c22:	7f3b      	ldrb	r3, [r7, #28]
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d105      	bne.n	8000c38 <MFRC522_ToCard+0xd4>
 8000c2c:	7f3a      	ldrb	r2, [r7, #28]
 8000c2e:	7f7b      	ldrb	r3, [r7, #29]
 8000c30:	4013      	ands	r3, r2
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d0e9      	beq.n	8000c0c <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8000c38:	2180      	movs	r1, #128	; 0x80
 8000c3a:	200d      	movs	r0, #13
 8000c3c:	f7ff ff31 	bl	8000aa2 <ClearBitMask>
	
    if (i != 0)
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d052      	beq.n	8000cec <MFRC522_ToCard+0x188>
    {    
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8000c46:	2006      	movs	r0, #6
 8000c48:	f7ff fee8 	bl	8000a1c <Read_MFRC522>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	f003 031b 	and.w	r3, r3, #27
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d148      	bne.n	8000ce8 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8000c5a:	7f3a      	ldrb	r2, [r7, #28]
 8000c5c:	7fbb      	ldrb	r3, [r7, #30]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MFRC522_ToCard+0x10a>
            {   
				status = MI_NOTAGERR;			//??   
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
 8000c70:	2b0c      	cmp	r3, #12
 8000c72:	d13b      	bne.n	8000cec <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8000c74:	200a      	movs	r0, #10
 8000c76:	f7ff fed1 	bl	8000a1c <Read_MFRC522>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8000c7e:	200c      	movs	r0, #12
 8000c80:	f7ff fecc 	bl	8000a1c <Read_MFRC522>
 8000c84:	4603      	mov	r3, r0
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8000c8c:	7dfb      	ldrb	r3, [r7, #23]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d008      	beq.n	8000ca4 <MFRC522_ToCard+0x140>
                {   
					*backLen = (n-1)*8 + lastBits;   
 8000c92:	7f3b      	ldrb	r3, [r7, #28]
 8000c94:	3b01      	subs	r3, #1
 8000c96:	00da      	lsls	r2, r3, #3
 8000c98:	7dfb      	ldrb	r3, [r7, #23]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	e004      	b.n	8000cae <MFRC522_ToCard+0x14a>
				}
                else
                {   
					*backLen = n*8;   
 8000ca4:	7f3b      	ldrb	r3, [r7, #28]
 8000ca6:	00db      	lsls	r3, r3, #3
 8000ca8:	461a      	mov	r2, r3
 8000caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cac:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8000cae:	7f3b      	ldrb	r3, [r7, #28]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d101      	bne.n	8000cb8 <MFRC522_ToCard+0x154>
                {   
					n = 1;    
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8000cb8:	7f3b      	ldrb	r3, [r7, #28]
 8000cba:	2b10      	cmp	r3, #16
 8000cbc:	d901      	bls.n	8000cc2 <MFRC522_ToCard+0x15e>
                {   
					n = MAX_LEN;   
 8000cbe:	2310      	movs	r3, #16
 8000cc0:	773b      	strb	r3, [r7, #28]
				}
				
				//FIFO doc in the received data
                for (i=0; i<n; i++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61bb      	str	r3, [r7, #24]
 8000cc6:	e00a      	b.n	8000cde <MFRC522_ToCard+0x17a>
                {   
					backData[i] = Read_MFRC522(FIFODataReg);    
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	18d4      	adds	r4, r2, r3
 8000cce:	2009      	movs	r0, #9
 8000cd0:	f7ff fea4 	bl	8000a1c <Read_MFRC522>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	61bb      	str	r3, [r7, #24]
 8000cde:	7f3b      	ldrb	r3, [r7, #28]
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d3f0      	bcc.n	8000cc8 <MFRC522_ToCard+0x164>
 8000ce6:	e001      	b.n	8000cec <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {   
			status = MI_ERR;  
 8000ce8:	2302      	movs	r3, #2
 8000cea:	77fb      	strb	r3, [r7, #31]
    }
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE); 

    return status;
 8000cec:	7ffb      	ldrb	r3, [r7, #31]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3724      	adds	r7, #36	; 0x24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd90      	pop	{r4, r7, pc}

08000cf6 <MFRC522_Request>:
 *				0x0800 = Mifare_Pro(X)
 *				0x4403 = Mifare_DESFire
 * Return: MI_OK if the bar is curved
 */
uint8_t MFRC522_Request(uint8_t reqMode, uint8_t *TagType)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b086      	sub	sp, #24
 8000cfa:	af02      	add	r7, sp, #8
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	6039      	str	r1, [r7, #0]
 8000d00:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint16 backBits;			//The bits are manipulated

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8000d02:	2107      	movs	r1, #7
 8000d04:	200d      	movs	r0, #13
 8000d06:	f7ff fe63 	bl	80009d0 <Write_MFRC522>
	
	TagType[0] = reqMode;
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	79fa      	ldrb	r2, [r7, #7]
 8000d0e:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000d10:	f107 0308 	add.w	r3, r7, #8
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	6839      	ldr	r1, [r7, #0]
 8000d1c:	200c      	movs	r0, #12
 8000d1e:	f7ff ff21 	bl	8000b64 <MFRC522_ToCard>
 8000d22:	4603      	mov	r3, r0
 8000d24:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d102      	bne.n	8000d32 <MFRC522_Request+0x3c>
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	2b10      	cmp	r3, #16
 8000d30:	d001      	beq.n	8000d36 <MFRC522_Request+0x40>
	{    
		status = MI_ERR;
 8000d32:	2302      	movs	r3, #2
 8000d34:	73fb      	strb	r3, [r7, #15]
	}
   
	return status;
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <MFRC522_Anticoll>:
 * Detect the collision, select and read the serial number
 * Input: serNum - Look up the serial the 4 byte, byte 5 is the ma checksum
 * Check: MI_OK if successful
 */
uint8_t MFRC522_Anticoll(uint8_t *serNum)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af02      	add	r7, sp, #8
 8000d46:	6078      	str	r0, [r7, #4]
    uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	737b      	strb	r3, [r7, #13]
    uint16 unLen;
    

    //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
    //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	200d      	movs	r0, #13
 8000d50:	f7ff fe3e 	bl	80009d0 <Write_MFRC522>
 
    serNum[0] = PICC_ANTICOLL;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2293      	movs	r2, #147	; 0x93
 8000d58:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	2220      	movs	r2, #32
 8000d60:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000d62:	f107 0308 	add.w	r3, r7, #8
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	6879      	ldr	r1, [r7, #4]
 8000d6e:	200c      	movs	r0, #12
 8000d70:	f7ff fef8 	bl	8000b64 <MFRC522_ToCard>
 8000d74:	4603      	mov	r3, r0
 8000d76:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d118      	bne.n	8000db0 <MFRC522_Anticoll+0x70>
	{
		//Check the serial number
		for (i=0; i<4; i++)
 8000d7e:	2300      	movs	r3, #0
 8000d80:	73bb      	strb	r3, [r7, #14]
 8000d82:	e009      	b.n	8000d98 <MFRC522_Anticoll+0x58>
		{   
		 	serNumCheck ^= serNum[i];
 8000d84:	7bbb      	ldrb	r3, [r7, #14]
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	781a      	ldrb	r2, [r3, #0]
 8000d8c:	7b7b      	ldrb	r3, [r7, #13]
 8000d8e:	4053      	eors	r3, r2
 8000d90:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8000d92:	7bbb      	ldrb	r3, [r7, #14]
 8000d94:	3301      	adds	r3, #1
 8000d96:	73bb      	strb	r3, [r7, #14]
 8000d98:	7bbb      	ldrb	r3, [r7, #14]
 8000d9a:	2b03      	cmp	r3, #3
 8000d9c:	d9f2      	bls.n	8000d84 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8000d9e:	7bbb      	ldrb	r3, [r7, #14]
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	4413      	add	r3, r2
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	7b7a      	ldrb	r2, [r7, #13]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d001      	beq.n	8000db0 <MFRC522_Anticoll+0x70>
		{   
			status = MI_ERR;    
 8000dac:	2302      	movs	r3, #2
 8000dae:	73fb      	strb	r3, [r7, #15]
		}
    }

    //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

    return status;
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
} 
 8000db2:	4618      	mov	r0, r3
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <HAL_MspInit+0x5c>)
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	4a14      	ldr	r2, [pc, #80]	; (8000e18 <HAL_MspInit+0x5c>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6193      	str	r3, [r2, #24]
 8000dce:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_MspInit+0x5c>)
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dda:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <HAL_MspInit+0x5c>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	4a0e      	ldr	r2, [pc, #56]	; (8000e18 <HAL_MspInit+0x5c>)
 8000de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de4:	61d3      	str	r3, [r2, #28]
 8000de6:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <HAL_MspInit+0x5c>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <HAL_MspInit+0x60>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <HAL_MspInit+0x60>)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	40010000 	.word	0x40010000

08000e20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a1b      	ldr	r2, [pc, #108]	; (8000ea8 <HAL_SPI_MspInit+0x88>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d12f      	bne.n	8000ea0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e40:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <HAL_SPI_MspInit+0x8c>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4a19      	ldr	r2, [pc, #100]	; (8000eac <HAL_SPI_MspInit+0x8c>)
 8000e46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e4a:	6193      	str	r3, [r2, #24]
 8000e4c:	4b17      	ldr	r3, [pc, #92]	; (8000eac <HAL_SPI_MspInit+0x8c>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e58:	4b14      	ldr	r3, [pc, #80]	; (8000eac <HAL_SPI_MspInit+0x8c>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	4a13      	ldr	r2, [pc, #76]	; (8000eac <HAL_SPI_MspInit+0x8c>)
 8000e5e:	f043 0304 	orr.w	r3, r3, #4
 8000e62:	6193      	str	r3, [r2, #24]
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <HAL_SPI_MspInit+0x8c>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	f003 0304 	and.w	r3, r3, #4
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e70:	23a0      	movs	r3, #160	; 0xa0
 8000e72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	4619      	mov	r1, r3
 8000e82:	480b      	ldr	r0, [pc, #44]	; (8000eb0 <HAL_SPI_MspInit+0x90>)
 8000e84:	f000 fac4 	bl	8001410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e88:	2340      	movs	r3, #64	; 0x40
 8000e8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e94:	f107 0310 	add.w	r3, r7, #16
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <HAL_SPI_MspInit+0x90>)
 8000e9c:	f000 fab8 	bl	8001410 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ea0:	bf00      	nop
 8000ea2:	3720      	adds	r7, #32
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40013000 	.word	0x40013000
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40010800 	.word	0x40010800

08000eb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ec4:	d10c      	bne.n	8000ee0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <HAL_TIM_Base_MspInit+0x58>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	4a10      	ldr	r2, [pc, #64]	; (8000f0c <HAL_TIM_Base_MspInit+0x58>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	61d3      	str	r3, [r2, #28]
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <HAL_TIM_Base_MspInit+0x58>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ede:	e010      	b.n	8000f02 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <HAL_TIM_Base_MspInit+0x5c>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d10b      	bne.n	8000f02 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <HAL_TIM_Base_MspInit+0x58>)
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <HAL_TIM_Base_MspInit+0x58>)
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	61d3      	str	r3, [r2, #28]
 8000ef6:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <HAL_TIM_Base_MspInit+0x58>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40000400 	.word	0x40000400

08000f14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f32:	d118      	bne.n	8000f66 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f34:	4b25      	ldr	r3, [pc, #148]	; (8000fcc <HAL_TIM_MspPostInit+0xb8>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	4a24      	ldr	r2, [pc, #144]	; (8000fcc <HAL_TIM_MspPostInit+0xb8>)
 8000f3a:	f043 0304 	orr.w	r3, r3, #4
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b22      	ldr	r3, [pc, #136]	; (8000fcc <HAL_TIM_MspPostInit+0xb8>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f003 0304 	and.w	r3, r3, #4
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	693b      	ldr	r3, [r7, #16]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000f4c:	230f      	movs	r3, #15
 8000f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2302      	movs	r3, #2
 8000f56:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	481c      	ldr	r0, [pc, #112]	; (8000fd0 <HAL_TIM_MspPostInit+0xbc>)
 8000f60:	f000 fa56 	bl	8001410 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f64:	e02e      	b.n	8000fc4 <HAL_TIM_MspPostInit+0xb0>
  else if(htim->Instance==TIM3)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a1a      	ldr	r2, [pc, #104]	; (8000fd4 <HAL_TIM_MspPostInit+0xc0>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d129      	bne.n	8000fc4 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <HAL_TIM_MspPostInit+0xb8>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	4a15      	ldr	r2, [pc, #84]	; (8000fcc <HAL_TIM_MspPostInit+0xb8>)
 8000f76:	f043 0308 	orr.w	r3, r3, #8
 8000f7a:	6193      	str	r3, [r2, #24]
 8000f7c:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <HAL_TIM_MspPostInit+0xb8>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	f003 0308 	and.w	r3, r3, #8
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000f88:	2322      	movs	r3, #34	; 0x22
 8000f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2302      	movs	r3, #2
 8000f92:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480f      	ldr	r0, [pc, #60]	; (8000fd8 <HAL_TIM_MspPostInit+0xc4>)
 8000f9c:	f000 fa38 	bl	8001410 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <HAL_TIM_MspPostInit+0xc8>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
 8000fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8000fbe:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_TIM_MspPostInit+0xc8>)
 8000fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc2:	6053      	str	r3, [r2, #4]
}
 8000fc4:	bf00      	nop
 8000fc6:	3728      	adds	r7, #40	; 0x28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	40010800 	.word	0x40010800
 8000fd4:	40000400 	.word	0x40000400
 8000fd8:	40010c00 	.word	0x40010c00
 8000fdc:	40010000 	.word	0x40010000

08000fe0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a22      	ldr	r2, [pc, #136]	; (8001084 <HAL_UART_MspInit+0xa4>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d13d      	bne.n	800107c <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001000:	4b21      	ldr	r3, [pc, #132]	; (8001088 <HAL_UART_MspInit+0xa8>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a20      	ldr	r2, [pc, #128]	; (8001088 <HAL_UART_MspInit+0xa8>)
 8001006:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <HAL_UART_MspInit+0xa8>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <HAL_UART_MspInit+0xa8>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	4a1a      	ldr	r2, [pc, #104]	; (8001088 <HAL_UART_MspInit+0xa8>)
 800101e:	f043 0308 	orr.w	r3, r3, #8
 8001022:	6193      	str	r3, [r2, #24]
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <HAL_UART_MspInit+0xa8>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	f003 0308 	and.w	r3, r3, #8
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001030:	2340      	movs	r3, #64	; 0x40
 8001032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001038:	2303      	movs	r3, #3
 800103a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	4812      	ldr	r0, [pc, #72]	; (800108c <HAL_UART_MspInit+0xac>)
 8001044:	f000 f9e4 	bl	8001410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001048:	2380      	movs	r3, #128	; 0x80
 800104a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	480c      	ldr	r0, [pc, #48]	; (800108c <HAL_UART_MspInit+0xac>)
 800105c:	f000 f9d8 	bl	8001410 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_UART_MspInit+0xb0>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
 800106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001070:	f043 0304 	orr.w	r3, r3, #4
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
 8001076:	4a06      	ldr	r2, [pc, #24]	; (8001090 <HAL_UART_MspInit+0xb0>)
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800107c:	bf00      	nop
 800107e:	3728      	adds	r7, #40	; 0x28
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40013800 	.word	0x40013800
 8001088:	40021000 	.word	0x40021000
 800108c:	40010c00 	.word	0x40010c00
 8001090:	40010000 	.word	0x40010000

08001094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <NMI_Handler+0x4>

0800109a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <HardFault_Handler+0x4>

080010a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <MemManage_Handler+0x4>

080010a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <BusFault_Handler+0x4>

080010ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <UsageFault_Handler+0x4>

080010b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr

080010be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr

080010ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr

080010d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010da:	f000 f875 	bl	80011c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr
	...

080010f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f0:	480c      	ldr	r0, [pc, #48]	; (8001124 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010f2:	490d      	ldr	r1, [pc, #52]	; (8001128 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010f4:	4a0d      	ldr	r2, [pc, #52]	; (800112c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f8:	e002      	b.n	8001100 <LoopCopyDataInit>

080010fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fe:	3304      	adds	r3, #4

08001100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001104:	d3f9      	bcc.n	80010fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001106:	4a0a      	ldr	r2, [pc, #40]	; (8001130 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001108:	4c0a      	ldr	r4, [pc, #40]	; (8001134 <LoopFillZerobss+0x22>)
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800110c:	e001      	b.n	8001112 <LoopFillZerobss>

0800110e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001110:	3204      	adds	r2, #4

08001112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001114:	d3fb      	bcc.n	800110e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001116:	f7ff ffe4 	bl	80010e2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800111a:	f002 f8df 	bl	80032dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800111e:	f7ff f815 	bl	800014c <main>
  bx lr
 8001122:	4770      	bx	lr
  ldr r0, =_sdata
 8001124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001128:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800112c:	0800337c 	.word	0x0800337c
  ldr r2, =_sbss
 8001130:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001134:	20000174 	.word	0x20000174

08001138 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001138:	e7fe      	b.n	8001138 <ADC1_2_IRQHandler>
	...

0800113c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <HAL_Init+0x28>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a07      	ldr	r2, [pc, #28]	; (8001164 <HAL_Init+0x28>)
 8001146:	f043 0310 	orr.w	r3, r3, #16
 800114a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800114c:	2003      	movs	r0, #3
 800114e:	f000 f92b 	bl	80013a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001152:	200f      	movs	r0, #15
 8001154:	f000 f808 	bl	8001168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001158:	f7ff fe30 	bl	8000dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40022000 	.word	0x40022000

08001168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_InitTick+0x54>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_InitTick+0x58>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001182:	fbb2 f3f3 	udiv	r3, r2, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f935 	bl	80013f6 <HAL_SYSTICK_Config>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e00e      	b.n	80011b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b0f      	cmp	r3, #15
 800119a:	d80a      	bhi.n	80011b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800119c:	2200      	movs	r2, #0
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	f000 f90b 	bl	80013be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a8:	4a06      	ldr	r2, [pc, #24]	; (80011c4 <HAL_InitTick+0x5c>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	e000      	b.n	80011b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000000 	.word	0x20000000
 80011c0:	20000008 	.word	0x20000008
 80011c4:	20000004 	.word	0x20000004

080011c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <HAL_IncTick+0x1c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <HAL_IncTick+0x20>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a03      	ldr	r2, [pc, #12]	; (80011e8 <HAL_IncTick+0x20>)
 80011da:	6013      	str	r3, [r2, #0]
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	20000008 	.word	0x20000008
 80011e8:	20000170 	.word	0x20000170

080011ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return uwTick;
 80011f0:	4b02      	ldr	r3, [pc, #8]	; (80011fc <HAL_GetTick+0x10>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr
 80011fc:	20000170 	.word	0x20000170

08001200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001208:	f7ff fff0 	bl	80011ec <HAL_GetTick>
 800120c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001218:	d005      	beq.n	8001226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <HAL_Delay+0x44>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4413      	add	r3, r2
 8001224:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001226:	bf00      	nop
 8001228:	f7ff ffe0 	bl	80011ec <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	429a      	cmp	r2, r3
 8001236:	d8f7      	bhi.n	8001228 <HAL_Delay+0x28>
  {
  }
}
 8001238:	bf00      	nop
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000008 	.word	0x20000008

08001248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <__NVIC_SetPriorityGrouping+0x44>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001264:	4013      	ands	r3, r2
 8001266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127a:	4a04      	ldr	r2, [pc, #16]	; (800128c <__NVIC_SetPriorityGrouping+0x44>)
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	60d3      	str	r3, [r2, #12]
}
 8001280:	bf00      	nop
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001294:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	0a1b      	lsrs	r3, r3, #8
 800129a:	f003 0307 	and.w	r3, r3, #7
}
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	6039      	str	r1, [r7, #0]
 80012b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	db0a      	blt.n	80012d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	490c      	ldr	r1, [pc, #48]	; (80012f8 <__NVIC_SetPriority+0x4c>)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	0112      	lsls	r2, r2, #4
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	440b      	add	r3, r1
 80012d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d4:	e00a      	b.n	80012ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4908      	ldr	r1, [pc, #32]	; (80012fc <__NVIC_SetPriority+0x50>)
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	3b04      	subs	r3, #4
 80012e4:	0112      	lsls	r2, r2, #4
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	440b      	add	r3, r1
 80012ea:	761a      	strb	r2, [r3, #24]
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000e100 	.word	0xe000e100
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001300:	b480      	push	{r7}
 8001302:	b089      	sub	sp, #36	; 0x24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f1c3 0307 	rsb	r3, r3, #7
 800131a:	2b04      	cmp	r3, #4
 800131c:	bf28      	it	cs
 800131e:	2304      	movcs	r3, #4
 8001320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3304      	adds	r3, #4
 8001326:	2b06      	cmp	r3, #6
 8001328:	d902      	bls.n	8001330 <NVIC_EncodePriority+0x30>
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3b03      	subs	r3, #3
 800132e:	e000      	b.n	8001332 <NVIC_EncodePriority+0x32>
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	f04f 32ff 	mov.w	r2, #4294967295
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43da      	mvns	r2, r3
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	401a      	ands	r2, r3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001348:	f04f 31ff 	mov.w	r1, #4294967295
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	fa01 f303 	lsl.w	r3, r1, r3
 8001352:	43d9      	mvns	r1, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	4313      	orrs	r3, r2
         );
}
 800135a:	4618      	mov	r0, r3
 800135c:	3724      	adds	r7, #36	; 0x24
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3b01      	subs	r3, #1
 8001370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001374:	d301      	bcc.n	800137a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001376:	2301      	movs	r3, #1
 8001378:	e00f      	b.n	800139a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800137a:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <SysTick_Config+0x40>)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3b01      	subs	r3, #1
 8001380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001382:	210f      	movs	r1, #15
 8001384:	f04f 30ff 	mov.w	r0, #4294967295
 8001388:	f7ff ff90 	bl	80012ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800138c:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <SysTick_Config+0x40>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001392:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <SysTick_Config+0x40>)
 8001394:	2207      	movs	r2, #7
 8001396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	e000e010 	.word	0xe000e010

080013a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ff49 	bl	8001248 <__NVIC_SetPriorityGrouping>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013be:	b580      	push	{r7, lr}
 80013c0:	b086      	sub	sp, #24
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	4603      	mov	r3, r0
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
 80013ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d0:	f7ff ff5e 	bl	8001290 <__NVIC_GetPriorityGrouping>
 80013d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	68b9      	ldr	r1, [r7, #8]
 80013da:	6978      	ldr	r0, [r7, #20]
 80013dc:	f7ff ff90 	bl	8001300 <NVIC_EncodePriority>
 80013e0:	4602      	mov	r2, r0
 80013e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e6:	4611      	mov	r1, r2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff5f 	bl	80012ac <__NVIC_SetPriority>
}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ffb0 	bl	8001364 <SysTick_Config>
 8001404:	4603      	mov	r3, r0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001410:	b480      	push	{r7}
 8001412:	b08b      	sub	sp, #44	; 0x2c
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800141a:	2300      	movs	r3, #0
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800141e:	2300      	movs	r3, #0
 8001420:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001422:	e169      	b.n	80016f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001424:	2201      	movs	r2, #1
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	69fa      	ldr	r2, [r7, #28]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	429a      	cmp	r2, r3
 800143e:	f040 8158 	bne.w	80016f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	4a9a      	ldr	r2, [pc, #616]	; (80016b0 <HAL_GPIO_Init+0x2a0>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d05e      	beq.n	800150a <HAL_GPIO_Init+0xfa>
 800144c:	4a98      	ldr	r2, [pc, #608]	; (80016b0 <HAL_GPIO_Init+0x2a0>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d875      	bhi.n	800153e <HAL_GPIO_Init+0x12e>
 8001452:	4a98      	ldr	r2, [pc, #608]	; (80016b4 <HAL_GPIO_Init+0x2a4>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d058      	beq.n	800150a <HAL_GPIO_Init+0xfa>
 8001458:	4a96      	ldr	r2, [pc, #600]	; (80016b4 <HAL_GPIO_Init+0x2a4>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d86f      	bhi.n	800153e <HAL_GPIO_Init+0x12e>
 800145e:	4a96      	ldr	r2, [pc, #600]	; (80016b8 <HAL_GPIO_Init+0x2a8>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d052      	beq.n	800150a <HAL_GPIO_Init+0xfa>
 8001464:	4a94      	ldr	r2, [pc, #592]	; (80016b8 <HAL_GPIO_Init+0x2a8>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d869      	bhi.n	800153e <HAL_GPIO_Init+0x12e>
 800146a:	4a94      	ldr	r2, [pc, #592]	; (80016bc <HAL_GPIO_Init+0x2ac>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d04c      	beq.n	800150a <HAL_GPIO_Init+0xfa>
 8001470:	4a92      	ldr	r2, [pc, #584]	; (80016bc <HAL_GPIO_Init+0x2ac>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d863      	bhi.n	800153e <HAL_GPIO_Init+0x12e>
 8001476:	4a92      	ldr	r2, [pc, #584]	; (80016c0 <HAL_GPIO_Init+0x2b0>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d046      	beq.n	800150a <HAL_GPIO_Init+0xfa>
 800147c:	4a90      	ldr	r2, [pc, #576]	; (80016c0 <HAL_GPIO_Init+0x2b0>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d85d      	bhi.n	800153e <HAL_GPIO_Init+0x12e>
 8001482:	2b12      	cmp	r3, #18
 8001484:	d82a      	bhi.n	80014dc <HAL_GPIO_Init+0xcc>
 8001486:	2b12      	cmp	r3, #18
 8001488:	d859      	bhi.n	800153e <HAL_GPIO_Init+0x12e>
 800148a:	a201      	add	r2, pc, #4	; (adr r2, 8001490 <HAL_GPIO_Init+0x80>)
 800148c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001490:	0800150b 	.word	0x0800150b
 8001494:	080014e5 	.word	0x080014e5
 8001498:	080014f7 	.word	0x080014f7
 800149c:	08001539 	.word	0x08001539
 80014a0:	0800153f 	.word	0x0800153f
 80014a4:	0800153f 	.word	0x0800153f
 80014a8:	0800153f 	.word	0x0800153f
 80014ac:	0800153f 	.word	0x0800153f
 80014b0:	0800153f 	.word	0x0800153f
 80014b4:	0800153f 	.word	0x0800153f
 80014b8:	0800153f 	.word	0x0800153f
 80014bc:	0800153f 	.word	0x0800153f
 80014c0:	0800153f 	.word	0x0800153f
 80014c4:	0800153f 	.word	0x0800153f
 80014c8:	0800153f 	.word	0x0800153f
 80014cc:	0800153f 	.word	0x0800153f
 80014d0:	0800153f 	.word	0x0800153f
 80014d4:	080014ed 	.word	0x080014ed
 80014d8:	08001501 	.word	0x08001501
 80014dc:	4a79      	ldr	r2, [pc, #484]	; (80016c4 <HAL_GPIO_Init+0x2b4>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d013      	beq.n	800150a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014e2:	e02c      	b.n	800153e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	623b      	str	r3, [r7, #32]
          break;
 80014ea:	e029      	b.n	8001540 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	3304      	adds	r3, #4
 80014f2:	623b      	str	r3, [r7, #32]
          break;
 80014f4:	e024      	b.n	8001540 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	3308      	adds	r3, #8
 80014fc:	623b      	str	r3, [r7, #32]
          break;
 80014fe:	e01f      	b.n	8001540 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	330c      	adds	r3, #12
 8001506:	623b      	str	r3, [r7, #32]
          break;
 8001508:	e01a      	b.n	8001540 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d102      	bne.n	8001518 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001512:	2304      	movs	r3, #4
 8001514:	623b      	str	r3, [r7, #32]
          break;
 8001516:	e013      	b.n	8001540 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d105      	bne.n	800152c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001520:	2308      	movs	r3, #8
 8001522:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69fa      	ldr	r2, [r7, #28]
 8001528:	611a      	str	r2, [r3, #16]
          break;
 800152a:	e009      	b.n	8001540 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800152c:	2308      	movs	r3, #8
 800152e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69fa      	ldr	r2, [r7, #28]
 8001534:	615a      	str	r2, [r3, #20]
          break;
 8001536:	e003      	b.n	8001540 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
          break;
 800153c:	e000      	b.n	8001540 <HAL_GPIO_Init+0x130>
          break;
 800153e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	2bff      	cmp	r3, #255	; 0xff
 8001544:	d801      	bhi.n	800154a <HAL_GPIO_Init+0x13a>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	e001      	b.n	800154e <HAL_GPIO_Init+0x13e>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3304      	adds	r3, #4
 800154e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	2bff      	cmp	r3, #255	; 0xff
 8001554:	d802      	bhi.n	800155c <HAL_GPIO_Init+0x14c>
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	e002      	b.n	8001562 <HAL_GPIO_Init+0x152>
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	3b08      	subs	r3, #8
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	210f      	movs	r1, #15
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	fa01 f303 	lsl.w	r3, r1, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	401a      	ands	r2, r3
 8001574:	6a39      	ldr	r1, [r7, #32]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	431a      	orrs	r2, r3
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 80b1 	beq.w	80016f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001590:	4b4d      	ldr	r3, [pc, #308]	; (80016c8 <HAL_GPIO_Init+0x2b8>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	4a4c      	ldr	r2, [pc, #304]	; (80016c8 <HAL_GPIO_Init+0x2b8>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6193      	str	r3, [r2, #24]
 800159c:	4b4a      	ldr	r3, [pc, #296]	; (80016c8 <HAL_GPIO_Init+0x2b8>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015a8:	4a48      	ldr	r2, [pc, #288]	; (80016cc <HAL_GPIO_Init+0x2bc>)
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	089b      	lsrs	r3, r3, #2
 80015ae:	3302      	adds	r3, #2
 80015b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	220f      	movs	r2, #15
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	4013      	ands	r3, r2
 80015ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a40      	ldr	r2, [pc, #256]	; (80016d0 <HAL_GPIO_Init+0x2c0>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d013      	beq.n	80015fc <HAL_GPIO_Init+0x1ec>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a3f      	ldr	r2, [pc, #252]	; (80016d4 <HAL_GPIO_Init+0x2c4>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d00d      	beq.n	80015f8 <HAL_GPIO_Init+0x1e8>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a3e      	ldr	r2, [pc, #248]	; (80016d8 <HAL_GPIO_Init+0x2c8>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d007      	beq.n	80015f4 <HAL_GPIO_Init+0x1e4>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a3d      	ldr	r2, [pc, #244]	; (80016dc <HAL_GPIO_Init+0x2cc>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d101      	bne.n	80015f0 <HAL_GPIO_Init+0x1e0>
 80015ec:	2303      	movs	r3, #3
 80015ee:	e006      	b.n	80015fe <HAL_GPIO_Init+0x1ee>
 80015f0:	2304      	movs	r3, #4
 80015f2:	e004      	b.n	80015fe <HAL_GPIO_Init+0x1ee>
 80015f4:	2302      	movs	r3, #2
 80015f6:	e002      	b.n	80015fe <HAL_GPIO_Init+0x1ee>
 80015f8:	2301      	movs	r3, #1
 80015fa:	e000      	b.n	80015fe <HAL_GPIO_Init+0x1ee>
 80015fc:	2300      	movs	r3, #0
 80015fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001600:	f002 0203 	and.w	r2, r2, #3
 8001604:	0092      	lsls	r2, r2, #2
 8001606:	4093      	lsls	r3, r2
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	4313      	orrs	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800160e:	492f      	ldr	r1, [pc, #188]	; (80016cc <HAL_GPIO_Init+0x2bc>)
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	089b      	lsrs	r3, r3, #2
 8001614:	3302      	adds	r3, #2
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d006      	beq.n	8001636 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001628:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <HAL_GPIO_Init+0x2d0>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	492c      	ldr	r1, [pc, #176]	; (80016e0 <HAL_GPIO_Init+0x2d0>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	600b      	str	r3, [r1, #0]
 8001634:	e006      	b.n	8001644 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001636:	4b2a      	ldr	r3, [pc, #168]	; (80016e0 <HAL_GPIO_Init+0x2d0>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	43db      	mvns	r3, r3
 800163e:	4928      	ldr	r1, [pc, #160]	; (80016e0 <HAL_GPIO_Init+0x2d0>)
 8001640:	4013      	ands	r3, r2
 8001642:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d006      	beq.n	800165e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001650:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <HAL_GPIO_Init+0x2d0>)
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	4922      	ldr	r1, [pc, #136]	; (80016e0 <HAL_GPIO_Init+0x2d0>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	604b      	str	r3, [r1, #4]
 800165c:	e006      	b.n	800166c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800165e:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <HAL_GPIO_Init+0x2d0>)
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	43db      	mvns	r3, r3
 8001666:	491e      	ldr	r1, [pc, #120]	; (80016e0 <HAL_GPIO_Init+0x2d0>)
 8001668:	4013      	ands	r3, r2
 800166a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d006      	beq.n	8001686 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001678:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <HAL_GPIO_Init+0x2d0>)
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	4918      	ldr	r1, [pc, #96]	; (80016e0 <HAL_GPIO_Init+0x2d0>)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	4313      	orrs	r3, r2
 8001682:	608b      	str	r3, [r1, #8]
 8001684:	e006      	b.n	8001694 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001686:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <HAL_GPIO_Init+0x2d0>)
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	43db      	mvns	r3, r3
 800168e:	4914      	ldr	r1, [pc, #80]	; (80016e0 <HAL_GPIO_Init+0x2d0>)
 8001690:	4013      	ands	r3, r2
 8001692:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d021      	beq.n	80016e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <HAL_GPIO_Init+0x2d0>)
 80016a2:	68da      	ldr	r2, [r3, #12]
 80016a4:	490e      	ldr	r1, [pc, #56]	; (80016e0 <HAL_GPIO_Init+0x2d0>)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	60cb      	str	r3, [r1, #12]
 80016ac:	e021      	b.n	80016f2 <HAL_GPIO_Init+0x2e2>
 80016ae:	bf00      	nop
 80016b0:	10320000 	.word	0x10320000
 80016b4:	10310000 	.word	0x10310000
 80016b8:	10220000 	.word	0x10220000
 80016bc:	10210000 	.word	0x10210000
 80016c0:	10120000 	.word	0x10120000
 80016c4:	10110000 	.word	0x10110000
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40010000 	.word	0x40010000
 80016d0:	40010800 	.word	0x40010800
 80016d4:	40010c00 	.word	0x40010c00
 80016d8:	40011000 	.word	0x40011000
 80016dc:	40011400 	.word	0x40011400
 80016e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_GPIO_Init+0x304>)
 80016e6:	68da      	ldr	r2, [r3, #12]
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	43db      	mvns	r3, r3
 80016ec:	4909      	ldr	r1, [pc, #36]	; (8001714 <HAL_GPIO_Init+0x304>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	3301      	adds	r3, #1
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	f47f ae8e 	bne.w	8001424 <HAL_GPIO_Init+0x14>
  }
}
 8001708:	bf00      	nop
 800170a:	bf00      	nop
 800170c:	372c      	adds	r7, #44	; 0x2c
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	40010400 	.word	0x40010400

08001718 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	887b      	ldrh	r3, [r7, #2]
 800172a:	4013      	ands	r3, r2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d002      	beq.n	8001736 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001730:	2301      	movs	r3, #1
 8001732:	73fb      	strb	r3, [r7, #15]
 8001734:	e001      	b.n	800173a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001736:	2300      	movs	r3, #0
 8001738:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800173a:	7bfb      	ldrb	r3, [r7, #15]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr

08001746 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	460b      	mov	r3, r1
 8001750:	807b      	strh	r3, [r7, #2]
 8001752:	4613      	mov	r3, r2
 8001754:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001756:	787b      	ldrb	r3, [r7, #1]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800175c:	887a      	ldrh	r2, [r7, #2]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001762:	e003      	b.n	800176c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001764:	887b      	ldrh	r3, [r7, #2]
 8001766:	041a      	lsls	r2, r3, #16
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	611a      	str	r2, [r3, #16]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr
	...

08001778 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e272      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 8087 	beq.w	80018a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001798:	4b92      	ldr	r3, [pc, #584]	; (80019e4 <HAL_RCC_OscConfig+0x26c>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 030c 	and.w	r3, r3, #12
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d00c      	beq.n	80017be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017a4:	4b8f      	ldr	r3, [pc, #572]	; (80019e4 <HAL_RCC_OscConfig+0x26c>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 030c 	and.w	r3, r3, #12
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d112      	bne.n	80017d6 <HAL_RCC_OscConfig+0x5e>
 80017b0:	4b8c      	ldr	r3, [pc, #560]	; (80019e4 <HAL_RCC_OscConfig+0x26c>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017bc:	d10b      	bne.n	80017d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017be:	4b89      	ldr	r3, [pc, #548]	; (80019e4 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d06c      	beq.n	80018a4 <HAL_RCC_OscConfig+0x12c>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d168      	bne.n	80018a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e24c      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017de:	d106      	bne.n	80017ee <HAL_RCC_OscConfig+0x76>
 80017e0:	4b80      	ldr	r3, [pc, #512]	; (80019e4 <HAL_RCC_OscConfig+0x26c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a7f      	ldr	r2, [pc, #508]	; (80019e4 <HAL_RCC_OscConfig+0x26c>)
 80017e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	e02e      	b.n	800184c <HAL_RCC_OscConfig+0xd4>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10c      	bne.n	8001810 <HAL_RCC_OscConfig+0x98>
 80017f6:	4b7b      	ldr	r3, [pc, #492]	; (80019e4 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a7a      	ldr	r2, [pc, #488]	; (80019e4 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	4b78      	ldr	r3, [pc, #480]	; (80019e4 <HAL_RCC_OscConfig+0x26c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a77      	ldr	r2, [pc, #476]	; (80019e4 <HAL_RCC_OscConfig+0x26c>)
 8001808:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	e01d      	b.n	800184c <HAL_RCC_OscConfig+0xd4>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001818:	d10c      	bne.n	8001834 <HAL_RCC_OscConfig+0xbc>
 800181a:	4b72      	ldr	r3, [pc, #456]	; (80019e4 <HAL_RCC_OscConfig+0x26c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a71      	ldr	r2, [pc, #452]	; (80019e4 <HAL_RCC_OscConfig+0x26c>)
 8001820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	4b6f      	ldr	r3, [pc, #444]	; (80019e4 <HAL_RCC_OscConfig+0x26c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a6e      	ldr	r2, [pc, #440]	; (80019e4 <HAL_RCC_OscConfig+0x26c>)
 800182c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e00b      	b.n	800184c <HAL_RCC_OscConfig+0xd4>
 8001834:	4b6b      	ldr	r3, [pc, #428]	; (80019e4 <HAL_RCC_OscConfig+0x26c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a6a      	ldr	r2, [pc, #424]	; (80019e4 <HAL_RCC_OscConfig+0x26c>)
 800183a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	4b68      	ldr	r3, [pc, #416]	; (80019e4 <HAL_RCC_OscConfig+0x26c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a67      	ldr	r2, [pc, #412]	; (80019e4 <HAL_RCC_OscConfig+0x26c>)
 8001846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800184a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d013      	beq.n	800187c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001854:	f7ff fcca 	bl	80011ec <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800185c:	f7ff fcc6 	bl	80011ec <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b64      	cmp	r3, #100	; 0x64
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e200      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186e:	4b5d      	ldr	r3, [pc, #372]	; (80019e4 <HAL_RCC_OscConfig+0x26c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0f0      	beq.n	800185c <HAL_RCC_OscConfig+0xe4>
 800187a:	e014      	b.n	80018a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187c:	f7ff fcb6 	bl	80011ec <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001884:	f7ff fcb2 	bl	80011ec <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b64      	cmp	r3, #100	; 0x64
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e1ec      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001896:	4b53      	ldr	r3, [pc, #332]	; (80019e4 <HAL_RCC_OscConfig+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x10c>
 80018a2:	e000      	b.n	80018a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d063      	beq.n	800197a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018b2:	4b4c      	ldr	r3, [pc, #304]	; (80019e4 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 030c 	and.w	r3, r3, #12
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00b      	beq.n	80018d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018be:	4b49      	ldr	r3, [pc, #292]	; (80019e4 <HAL_RCC_OscConfig+0x26c>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 030c 	and.w	r3, r3, #12
 80018c6:	2b08      	cmp	r3, #8
 80018c8:	d11c      	bne.n	8001904 <HAL_RCC_OscConfig+0x18c>
 80018ca:	4b46      	ldr	r3, [pc, #280]	; (80019e4 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d116      	bne.n	8001904 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d6:	4b43      	ldr	r3, [pc, #268]	; (80019e4 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d005      	beq.n	80018ee <HAL_RCC_OscConfig+0x176>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d001      	beq.n	80018ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e1c0      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ee:	4b3d      	ldr	r3, [pc, #244]	; (80019e4 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	4939      	ldr	r1, [pc, #228]	; (80019e4 <HAL_RCC_OscConfig+0x26c>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001902:	e03a      	b.n	800197a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d020      	beq.n	800194e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800190c:	4b36      	ldr	r3, [pc, #216]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 800190e:	2201      	movs	r2, #1
 8001910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001912:	f7ff fc6b 	bl	80011ec <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800191a:	f7ff fc67 	bl	80011ec <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e1a1      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192c:	4b2d      	ldr	r3, [pc, #180]	; (80019e4 <HAL_RCC_OscConfig+0x26c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0f0      	beq.n	800191a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001938:	4b2a      	ldr	r3, [pc, #168]	; (80019e4 <HAL_RCC_OscConfig+0x26c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	4927      	ldr	r1, [pc, #156]	; (80019e4 <HAL_RCC_OscConfig+0x26c>)
 8001948:	4313      	orrs	r3, r2
 800194a:	600b      	str	r3, [r1, #0]
 800194c:	e015      	b.n	800197a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800194e:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001954:	f7ff fc4a 	bl	80011ec <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800195c:	f7ff fc46 	bl	80011ec <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e180      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800196e:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <HAL_RCC_OscConfig+0x26c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	2b00      	cmp	r3, #0
 8001984:	d03a      	beq.n	80019fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d019      	beq.n	80019c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800198e:	4b17      	ldr	r3, [pc, #92]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 8001990:	2201      	movs	r2, #1
 8001992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001994:	f7ff fc2a 	bl	80011ec <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800199c:	f7ff fc26 	bl	80011ec <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e160      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ae:	4b0d      	ldr	r3, [pc, #52]	; (80019e4 <HAL_RCC_OscConfig+0x26c>)
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019ba:	2001      	movs	r0, #1
 80019bc:	f000 fad8 	bl	8001f70 <RCC_Delay>
 80019c0:	e01c      	b.n	80019fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c8:	f7ff fc10 	bl	80011ec <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ce:	e00f      	b.n	80019f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d0:	f7ff fc0c 	bl	80011ec <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d908      	bls.n	80019f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e146      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
 80019e2:	bf00      	nop
 80019e4:	40021000 	.word	0x40021000
 80019e8:	42420000 	.word	0x42420000
 80019ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f0:	4b92      	ldr	r3, [pc, #584]	; (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 80019f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1e9      	bne.n	80019d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80a6 	beq.w	8001b56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a0e:	4b8b      	ldr	r3, [pc, #556]	; (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10d      	bne.n	8001a36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a1a:	4b88      	ldr	r3, [pc, #544]	; (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	4a87      	ldr	r2, [pc, #540]	; (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a24:	61d3      	str	r3, [r2, #28]
 8001a26:	4b85      	ldr	r3, [pc, #532]	; (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a32:	2301      	movs	r3, #1
 8001a34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a36:	4b82      	ldr	r3, [pc, #520]	; (8001c40 <HAL_RCC_OscConfig+0x4c8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d118      	bne.n	8001a74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a42:	4b7f      	ldr	r3, [pc, #508]	; (8001c40 <HAL_RCC_OscConfig+0x4c8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a7e      	ldr	r2, [pc, #504]	; (8001c40 <HAL_RCC_OscConfig+0x4c8>)
 8001a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a4e:	f7ff fbcd 	bl	80011ec <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a56:	f7ff fbc9 	bl	80011ec <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b64      	cmp	r3, #100	; 0x64
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e103      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a68:	4b75      	ldr	r3, [pc, #468]	; (8001c40 <HAL_RCC_OscConfig+0x4c8>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d106      	bne.n	8001a8a <HAL_RCC_OscConfig+0x312>
 8001a7c:	4b6f      	ldr	r3, [pc, #444]	; (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	4a6e      	ldr	r2, [pc, #440]	; (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6213      	str	r3, [r2, #32]
 8001a88:	e02d      	b.n	8001ae6 <HAL_RCC_OscConfig+0x36e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10c      	bne.n	8001aac <HAL_RCC_OscConfig+0x334>
 8001a92:	4b6a      	ldr	r3, [pc, #424]	; (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	4a69      	ldr	r2, [pc, #420]	; (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001a98:	f023 0301 	bic.w	r3, r3, #1
 8001a9c:	6213      	str	r3, [r2, #32]
 8001a9e:	4b67      	ldr	r3, [pc, #412]	; (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	4a66      	ldr	r2, [pc, #408]	; (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001aa4:	f023 0304 	bic.w	r3, r3, #4
 8001aa8:	6213      	str	r3, [r2, #32]
 8001aaa:	e01c      	b.n	8001ae6 <HAL_RCC_OscConfig+0x36e>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	2b05      	cmp	r3, #5
 8001ab2:	d10c      	bne.n	8001ace <HAL_RCC_OscConfig+0x356>
 8001ab4:	4b61      	ldr	r3, [pc, #388]	; (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	4a60      	ldr	r2, [pc, #384]	; (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001aba:	f043 0304 	orr.w	r3, r3, #4
 8001abe:	6213      	str	r3, [r2, #32]
 8001ac0:	4b5e      	ldr	r3, [pc, #376]	; (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	4a5d      	ldr	r2, [pc, #372]	; (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	6213      	str	r3, [r2, #32]
 8001acc:	e00b      	b.n	8001ae6 <HAL_RCC_OscConfig+0x36e>
 8001ace:	4b5b      	ldr	r3, [pc, #364]	; (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	4a5a      	ldr	r2, [pc, #360]	; (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001ad4:	f023 0301 	bic.w	r3, r3, #1
 8001ad8:	6213      	str	r3, [r2, #32]
 8001ada:	4b58      	ldr	r3, [pc, #352]	; (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	4a57      	ldr	r2, [pc, #348]	; (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001ae0:	f023 0304 	bic.w	r3, r3, #4
 8001ae4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d015      	beq.n	8001b1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aee:	f7ff fb7d 	bl	80011ec <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af4:	e00a      	b.n	8001b0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af6:	f7ff fb79 	bl	80011ec <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e0b1      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b0c:	4b4b      	ldr	r3, [pc, #300]	; (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0ee      	beq.n	8001af6 <HAL_RCC_OscConfig+0x37e>
 8001b18:	e014      	b.n	8001b44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1a:	f7ff fb67 	bl	80011ec <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b20:	e00a      	b.n	8001b38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b22:	f7ff fb63 	bl	80011ec <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e09b      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b38:	4b40      	ldr	r3, [pc, #256]	; (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1ee      	bne.n	8001b22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b44:	7dfb      	ldrb	r3, [r7, #23]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d105      	bne.n	8001b56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b4a:	4b3c      	ldr	r3, [pc, #240]	; (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	4a3b      	ldr	r2, [pc, #236]	; (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001b50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 8087 	beq.w	8001c6e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b60:	4b36      	ldr	r3, [pc, #216]	; (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 030c 	and.w	r3, r3, #12
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d061      	beq.n	8001c30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d146      	bne.n	8001c02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b74:	4b33      	ldr	r3, [pc, #204]	; (8001c44 <HAL_RCC_OscConfig+0x4cc>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7a:	f7ff fb37 	bl	80011ec <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b82:	f7ff fb33 	bl	80011ec <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e06d      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b94:	4b29      	ldr	r3, [pc, #164]	; (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1f0      	bne.n	8001b82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba8:	d108      	bne.n	8001bbc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001baa:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	4921      	ldr	r1, [pc, #132]	; (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bbc:	4b1f      	ldr	r3, [pc, #124]	; (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a19      	ldr	r1, [r3, #32]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	430b      	orrs	r3, r1
 8001bce:	491b      	ldr	r1, [pc, #108]	; (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <HAL_RCC_OscConfig+0x4cc>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bda:	f7ff fb07 	bl	80011ec <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be2:	f7ff fb03 	bl	80011ec <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e03d      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0f0      	beq.n	8001be2 <HAL_RCC_OscConfig+0x46a>
 8001c00:	e035      	b.n	8001c6e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c02:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <HAL_RCC_OscConfig+0x4cc>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c08:	f7ff faf0 	bl	80011ec <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c10:	f7ff faec 	bl	80011ec <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e026      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0x498>
 8001c2e:	e01e      	b.n	8001c6e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d107      	bne.n	8001c48 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e019      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40007000 	.word	0x40007000
 8001c44:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_RCC_OscConfig+0x500>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d106      	bne.n	8001c6a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d001      	beq.n	8001c6e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40021000 	.word	0x40021000

08001c7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e0d0      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c90:	4b6a      	ldr	r3, [pc, #424]	; (8001e3c <HAL_RCC_ClockConfig+0x1c0>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d910      	bls.n	8001cc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9e:	4b67      	ldr	r3, [pc, #412]	; (8001e3c <HAL_RCC_ClockConfig+0x1c0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f023 0207 	bic.w	r2, r3, #7
 8001ca6:	4965      	ldr	r1, [pc, #404]	; (8001e3c <HAL_RCC_ClockConfig+0x1c0>)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cae:	4b63      	ldr	r3, [pc, #396]	; (8001e3c <HAL_RCC_ClockConfig+0x1c0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d001      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e0b8      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d020      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d005      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cd8:	4b59      	ldr	r3, [pc, #356]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	4a58      	ldr	r2, [pc, #352]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001cde:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ce2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cf0:	4b53      	ldr	r3, [pc, #332]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	4a52      	ldr	r2, [pc, #328]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cfa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cfc:	4b50      	ldr	r3, [pc, #320]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	494d      	ldr	r1, [pc, #308]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d040      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d107      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d22:	4b47      	ldr	r3, [pc, #284]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d115      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e07f      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d107      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d3a:	4b41      	ldr	r3, [pc, #260]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d109      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e073      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4a:	4b3d      	ldr	r3, [pc, #244]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e06b      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d5a:	4b39      	ldr	r3, [pc, #228]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f023 0203 	bic.w	r2, r3, #3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	4936      	ldr	r1, [pc, #216]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d6c:	f7ff fa3e 	bl	80011ec <HAL_GetTick>
 8001d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d72:	e00a      	b.n	8001d8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d74:	f7ff fa3a 	bl	80011ec <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e053      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8a:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 020c 	and.w	r2, r3, #12
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d1eb      	bne.n	8001d74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d9c:	4b27      	ldr	r3, [pc, #156]	; (8001e3c <HAL_RCC_ClockConfig+0x1c0>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d210      	bcs.n	8001dcc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001daa:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <HAL_RCC_ClockConfig+0x1c0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 0207 	bic.w	r2, r3, #7
 8001db2:	4922      	ldr	r1, [pc, #136]	; (8001e3c <HAL_RCC_ClockConfig+0x1c0>)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dba:	4b20      	ldr	r3, [pc, #128]	; (8001e3c <HAL_RCC_ClockConfig+0x1c0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d001      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e032      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d008      	beq.n	8001dea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	4916      	ldr	r1, [pc, #88]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d009      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001df6:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	490e      	ldr	r1, [pc, #56]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e0a:	f000 f821 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	091b      	lsrs	r3, r3, #4
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	490a      	ldr	r1, [pc, #40]	; (8001e44 <HAL_RCC_ClockConfig+0x1c8>)
 8001e1c:	5ccb      	ldrb	r3, [r1, r3]
 8001e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e22:	4a09      	ldr	r2, [pc, #36]	; (8001e48 <HAL_RCC_ClockConfig+0x1cc>)
 8001e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <HAL_RCC_ClockConfig+0x1d0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff f99c 	bl	8001168 <HAL_InitTick>

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40022000 	.word	0x40022000
 8001e40:	40021000 	.word	0x40021000
 8001e44:	0800335c 	.word	0x0800335c
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	20000004 	.word	0x20000004

08001e50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e50:	b490      	push	{r4, r7}
 8001e52:	b08a      	sub	sp, #40	; 0x28
 8001e54:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e56:	4b29      	ldr	r3, [pc, #164]	; (8001efc <HAL_RCC_GetSysClockFreq+0xac>)
 8001e58:	1d3c      	adds	r4, r7, #4
 8001e5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e60:	f240 2301 	movw	r3, #513	; 0x201
 8001e64:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61bb      	str	r3, [r7, #24]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e7a:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f003 030c 	and.w	r3, r3, #12
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	d002      	beq.n	8001e90 <HAL_RCC_GetSysClockFreq+0x40>
 8001e8a:	2b08      	cmp	r3, #8
 8001e8c:	d003      	beq.n	8001e96 <HAL_RCC_GetSysClockFreq+0x46>
 8001e8e:	e02b      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e90:	4b1c      	ldr	r3, [pc, #112]	; (8001f04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e92:	623b      	str	r3, [r7, #32]
      break;
 8001e94:	e02b      	b.n	8001eee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	0c9b      	lsrs	r3, r3, #18
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	3328      	adds	r3, #40	; 0x28
 8001ea0:	443b      	add	r3, r7
 8001ea2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ea6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d012      	beq.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001eb2:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	0c5b      	lsrs	r3, r3, #17
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	3328      	adds	r3, #40	; 0x28
 8001ebe:	443b      	add	r3, r7
 8001ec0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ec4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	4a0e      	ldr	r2, [pc, #56]	; (8001f04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001eca:	fb03 f202 	mul.w	r2, r3, r2
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed6:	e004      	b.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	4a0b      	ldr	r2, [pc, #44]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001edc:	fb02 f303 	mul.w	r3, r2, r3
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	623b      	str	r3, [r7, #32]
      break;
 8001ee6:	e002      	b.n	8001eee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001eea:	623b      	str	r3, [r7, #32]
      break;
 8001eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eee:	6a3b      	ldr	r3, [r7, #32]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3728      	adds	r7, #40	; 0x28
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc90      	pop	{r4, r7}
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	0800334c 	.word	0x0800334c
 8001f00:	40021000 	.word	0x40021000
 8001f04:	007a1200 	.word	0x007a1200
 8001f08:	003d0900 	.word	0x003d0900

08001f0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f10:	4b02      	ldr	r3, [pc, #8]	; (8001f1c <HAL_RCC_GetHCLKFreq+0x10>)
 8001f12:	681b      	ldr	r3, [r3, #0]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr
 8001f1c:	20000000 	.word	0x20000000

08001f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f24:	f7ff fff2 	bl	8001f0c <HAL_RCC_GetHCLKFreq>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	0a1b      	lsrs	r3, r3, #8
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	4903      	ldr	r1, [pc, #12]	; (8001f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f36:	5ccb      	ldrb	r3, [r1, r3]
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	0800336c 	.word	0x0800336c

08001f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f4c:	f7ff ffde 	bl	8001f0c <HAL_RCC_GetHCLKFreq>
 8001f50:	4602      	mov	r2, r0
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	0adb      	lsrs	r3, r3, #11
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	4903      	ldr	r1, [pc, #12]	; (8001f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f5e:	5ccb      	ldrb	r3, [r1, r3]
 8001f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	0800336c 	.word	0x0800336c

08001f70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f78:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <RCC_Delay+0x34>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <RCC_Delay+0x38>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	0a5b      	lsrs	r3, r3, #9
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	fb02 f303 	mul.w	r3, r2, r3
 8001f8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f8c:	bf00      	nop
  }
  while (Delay --);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	1e5a      	subs	r2, r3, #1
 8001f92:	60fa      	str	r2, [r7, #12]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1f9      	bne.n	8001f8c <RCC_Delay+0x1c>
}
 8001f98:	bf00      	nop
 8001f9a:	bf00      	nop
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	20000000 	.word	0x20000000
 8001fa8:	10624dd3 	.word	0x10624dd3

08001fac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e076      	b.n	80020ac <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d108      	bne.n	8001fd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fce:	d009      	beq.n	8001fe4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	61da      	str	r2, [r3, #28]
 8001fd6:	e005      	b.n	8001fe4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d106      	bne.n	8002004 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7fe ff0e 	bl	8000e20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800201a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800202c:	431a      	orrs	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002054:	431a      	orrs	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002068:	ea42 0103 	orr.w	r1, r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002070:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	0c1a      	lsrs	r2, r3, #16
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f002 0204 	and.w	r2, r2, #4
 800208a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	69da      	ldr	r2, [r3, #28]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800209a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08c      	sub	sp, #48	; 0x30
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
 80020c0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80020c2:	2301      	movs	r3, #1
 80020c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_SPI_TransmitReceive+0x26>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e18a      	b.n	80023f0 <HAL_SPI_TransmitReceive+0x33c>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020e2:	f7ff f883 	bl	80011ec <HAL_GetTick>
 80020e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80020f8:	887b      	ldrh	r3, [r7, #2]
 80020fa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80020fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002100:	2b01      	cmp	r3, #1
 8002102:	d00f      	beq.n	8002124 <HAL_SPI_TransmitReceive+0x70>
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800210a:	d107      	bne.n	800211c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d103      	bne.n	800211c <HAL_SPI_TransmitReceive+0x68>
 8002114:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002118:	2b04      	cmp	r3, #4
 800211a:	d003      	beq.n	8002124 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800211c:	2302      	movs	r3, #2
 800211e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002122:	e15b      	b.n	80023dc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d005      	beq.n	8002136 <HAL_SPI_TransmitReceive+0x82>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d002      	beq.n	8002136 <HAL_SPI_TransmitReceive+0x82>
 8002130:	887b      	ldrh	r3, [r7, #2]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d103      	bne.n	800213e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800213c:	e14e      	b.n	80023dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b04      	cmp	r3, #4
 8002148:	d003      	beq.n	8002152 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2205      	movs	r2, #5
 800214e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	887a      	ldrh	r2, [r7, #2]
 8002162:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	887a      	ldrh	r2, [r7, #2]
 8002168:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	887a      	ldrh	r2, [r7, #2]
 8002174:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	887a      	ldrh	r2, [r7, #2]
 800217a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002192:	2b40      	cmp	r3, #64	; 0x40
 8002194:	d007      	beq.n	80021a6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021ae:	d178      	bne.n	80022a2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d002      	beq.n	80021be <HAL_SPI_TransmitReceive+0x10a>
 80021b8:	8b7b      	ldrh	r3, [r7, #26]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d166      	bne.n	800228c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	881a      	ldrh	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	1c9a      	adds	r2, r3, #2
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021d8:	b29b      	uxth	r3, r3
 80021da:	3b01      	subs	r3, #1
 80021dc:	b29a      	uxth	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021e2:	e053      	b.n	800228c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d11b      	bne.n	800222a <HAL_SPI_TransmitReceive+0x176>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d016      	beq.n	800222a <HAL_SPI_TransmitReceive+0x176>
 80021fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d113      	bne.n	800222a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	881a      	ldrh	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	1c9a      	adds	r2, r3, #2
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800221c:	b29b      	uxth	r3, r3
 800221e:	3b01      	subs	r3, #1
 8002220:	b29a      	uxth	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002226:	2300      	movs	r3, #0
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b01      	cmp	r3, #1
 8002236:	d119      	bne.n	800226c <HAL_SPI_TransmitReceive+0x1b8>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800223c:	b29b      	uxth	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d014      	beq.n	800226c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224c:	b292      	uxth	r2, r2
 800224e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002254:	1c9a      	adds	r2, r3, #2
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800225e:	b29b      	uxth	r3, r3
 8002260:	3b01      	subs	r3, #1
 8002262:	b29a      	uxth	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002268:	2301      	movs	r3, #1
 800226a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800226c:	f7fe ffbe 	bl	80011ec <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002278:	429a      	cmp	r2, r3
 800227a:	d807      	bhi.n	800228c <HAL_SPI_TransmitReceive+0x1d8>
 800227c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800227e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002282:	d003      	beq.n	800228c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800228a:	e0a7      	b.n	80023dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002290:	b29b      	uxth	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1a6      	bne.n	80021e4 <HAL_SPI_TransmitReceive+0x130>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800229a:	b29b      	uxth	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1a1      	bne.n	80021e4 <HAL_SPI_TransmitReceive+0x130>
 80022a0:	e07c      	b.n	800239c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <HAL_SPI_TransmitReceive+0x1fc>
 80022aa:	8b7b      	ldrh	r3, [r7, #26]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d16b      	bne.n	8002388 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	330c      	adds	r3, #12
 80022ba:	7812      	ldrb	r2, [r2, #0]
 80022bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022d6:	e057      	b.n	8002388 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d11c      	bne.n	8002320 <HAL_SPI_TransmitReceive+0x26c>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d017      	beq.n	8002320 <HAL_SPI_TransmitReceive+0x26c>
 80022f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d114      	bne.n	8002320 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	330c      	adds	r3, #12
 8002300:	7812      	ldrb	r2, [r2, #0]
 8002302:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	1c5a      	adds	r2, r3, #1
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002312:	b29b      	uxth	r3, r3
 8002314:	3b01      	subs	r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b01      	cmp	r3, #1
 800232c:	d119      	bne.n	8002362 <HAL_SPI_TransmitReceive+0x2ae>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002332:	b29b      	uxth	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d014      	beq.n	8002362 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234a:	1c5a      	adds	r2, r3, #1
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002354:	b29b      	uxth	r3, r3
 8002356:	3b01      	subs	r3, #1
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800235e:	2301      	movs	r3, #1
 8002360:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002362:	f7fe ff43 	bl	80011ec <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800236e:	429a      	cmp	r2, r3
 8002370:	d803      	bhi.n	800237a <HAL_SPI_TransmitReceive+0x2c6>
 8002372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002378:	d102      	bne.n	8002380 <HAL_SPI_TransmitReceive+0x2cc>
 800237a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800237c:	2b00      	cmp	r3, #0
 800237e:	d103      	bne.n	8002388 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002386:	e029      	b.n	80023dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800238c:	b29b      	uxth	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1a2      	bne.n	80022d8 <HAL_SPI_TransmitReceive+0x224>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002396:	b29b      	uxth	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	d19d      	bne.n	80022d8 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800239c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800239e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 f8b1 	bl	8002508 <SPI_EndRxTxTransaction>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d006      	beq.n	80023ba <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2220      	movs	r2, #32
 80023b6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80023b8:	e010      	b.n	80023dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10b      	bne.n	80023da <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	e000      	b.n	80023dc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80023da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80023ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3730      	adds	r7, #48	; 0x30
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	4613      	mov	r3, r2
 8002406:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002408:	f7fe fef0 	bl	80011ec <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002410:	1a9b      	subs	r3, r3, r2
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	4413      	add	r3, r2
 8002416:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002418:	f7fe fee8 	bl	80011ec <HAL_GetTick>
 800241c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800241e:	4b39      	ldr	r3, [pc, #228]	; (8002504 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	015b      	lsls	r3, r3, #5
 8002424:	0d1b      	lsrs	r3, r3, #20
 8002426:	69fa      	ldr	r2, [r7, #28]
 8002428:	fb02 f303 	mul.w	r3, r2, r3
 800242c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800242e:	e054      	b.n	80024da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002436:	d050      	beq.n	80024da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002438:	f7fe fed8 	bl	80011ec <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	69fa      	ldr	r2, [r7, #28]
 8002444:	429a      	cmp	r2, r3
 8002446:	d902      	bls.n	800244e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d13d      	bne.n	80024ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800245c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002466:	d111      	bne.n	800248c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002470:	d004      	beq.n	800247c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800247a:	d107      	bne.n	800248c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800248a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002494:	d10f      	bne.n	80024b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e017      	b.n	80024fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	4013      	ands	r3, r2
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	bf0c      	ite	eq
 80024ea:	2301      	moveq	r3, #1
 80024ec:	2300      	movne	r3, #0
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	461a      	mov	r2, r3
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d19b      	bne.n	8002430 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3720      	adds	r7, #32
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000000 	.word	0x20000000

08002508 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af02      	add	r7, sp, #8
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2200      	movs	r2, #0
 800251c:	2180      	movs	r1, #128	; 0x80
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f7ff ff6a 	bl	80023f8 <SPI_WaitFlagStateUntilTimeout>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d007      	beq.n	800253a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252e:	f043 0220 	orr.w	r2, r3, #32
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e000      	b.n	800253c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e041      	b.n	80025da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d106      	bne.n	8002570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7fe fca2 	bl	8000eb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2202      	movs	r2, #2
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3304      	adds	r3, #4
 8002580:	4619      	mov	r1, r3
 8002582:	4610      	mov	r0, r2
 8002584:	f000 faaa 	bl	8002adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e041      	b.n	8002678 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d106      	bne.n	800260e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f839 	bl	8002680 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2202      	movs	r2, #2
 8002612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3304      	adds	r3, #4
 800261e:	4619      	mov	r1, r3
 8002620:	4610      	mov	r0, r2
 8002622:	f000 fa5b 	bl	8002adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr
	...

08002694 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d109      	bne.n	80026b8 <HAL_TIM_PWM_Start+0x24>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	bf14      	ite	ne
 80026b0:	2301      	movne	r3, #1
 80026b2:	2300      	moveq	r3, #0
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	e022      	b.n	80026fe <HAL_TIM_PWM_Start+0x6a>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d109      	bne.n	80026d2 <HAL_TIM_PWM_Start+0x3e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	bf14      	ite	ne
 80026ca:	2301      	movne	r3, #1
 80026cc:	2300      	moveq	r3, #0
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	e015      	b.n	80026fe <HAL_TIM_PWM_Start+0x6a>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d109      	bne.n	80026ec <HAL_TIM_PWM_Start+0x58>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	bf14      	ite	ne
 80026e4:	2301      	movne	r3, #1
 80026e6:	2300      	moveq	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	e008      	b.n	80026fe <HAL_TIM_PWM_Start+0x6a>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	bf14      	ite	ne
 80026f8:	2301      	movne	r3, #1
 80026fa:	2300      	moveq	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e05e      	b.n	80027c4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d104      	bne.n	8002716 <HAL_TIM_PWM_Start+0x82>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002714:	e013      	b.n	800273e <HAL_TIM_PWM_Start+0xaa>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b04      	cmp	r3, #4
 800271a:	d104      	bne.n	8002726 <HAL_TIM_PWM_Start+0x92>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002724:	e00b      	b.n	800273e <HAL_TIM_PWM_Start+0xaa>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	2b08      	cmp	r3, #8
 800272a:	d104      	bne.n	8002736 <HAL_TIM_PWM_Start+0xa2>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2202      	movs	r2, #2
 8002730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002734:	e003      	b.n	800273e <HAL_TIM_PWM_Start+0xaa>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2202      	movs	r2, #2
 800273a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2201      	movs	r2, #1
 8002744:	6839      	ldr	r1, [r7, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f000 fc48 	bl	8002fdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a1e      	ldr	r2, [pc, #120]	; (80027cc <HAL_TIM_PWM_Start+0x138>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d107      	bne.n	8002766 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002764:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a18      	ldr	r2, [pc, #96]	; (80027cc <HAL_TIM_PWM_Start+0x138>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d00e      	beq.n	800278e <HAL_TIM_PWM_Start+0xfa>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002778:	d009      	beq.n	800278e <HAL_TIM_PWM_Start+0xfa>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a14      	ldr	r2, [pc, #80]	; (80027d0 <HAL_TIM_PWM_Start+0x13c>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d004      	beq.n	800278e <HAL_TIM_PWM_Start+0xfa>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a12      	ldr	r2, [pc, #72]	; (80027d4 <HAL_TIM_PWM_Start+0x140>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d111      	bne.n	80027b2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b06      	cmp	r3, #6
 800279e:	d010      	beq.n	80027c2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b0:	e007      	b.n	80027c2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f042 0201 	orr.w	r2, r2, #1
 80027c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40012c00 	.word	0x40012c00
 80027d0:	40000400 	.word	0x40000400
 80027d4:	40000800 	.word	0x40000800

080027d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e0ac      	b.n	800294c <HAL_TIM_PWM_ConfigChannel+0x174>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b0c      	cmp	r3, #12
 80027fe:	f200 809f 	bhi.w	8002940 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002802:	a201      	add	r2, pc, #4	; (adr r2, 8002808 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002808:	0800283d 	.word	0x0800283d
 800280c:	08002941 	.word	0x08002941
 8002810:	08002941 	.word	0x08002941
 8002814:	08002941 	.word	0x08002941
 8002818:	0800287d 	.word	0x0800287d
 800281c:	08002941 	.word	0x08002941
 8002820:	08002941 	.word	0x08002941
 8002824:	08002941 	.word	0x08002941
 8002828:	080028bf 	.word	0x080028bf
 800282c:	08002941 	.word	0x08002941
 8002830:	08002941 	.word	0x08002941
 8002834:	08002941 	.word	0x08002941
 8002838:	080028ff 	.word	0x080028ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68b9      	ldr	r1, [r7, #8]
 8002842:	4618      	mov	r0, r3
 8002844:	f000 f9ac 	bl	8002ba0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699a      	ldr	r2, [r3, #24]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0208 	orr.w	r2, r2, #8
 8002856:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699a      	ldr	r2, [r3, #24]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0204 	bic.w	r2, r2, #4
 8002866:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6999      	ldr	r1, [r3, #24]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	691a      	ldr	r2, [r3, #16]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	619a      	str	r2, [r3, #24]
      break;
 800287a:	e062      	b.n	8002942 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68b9      	ldr	r1, [r7, #8]
 8002882:	4618      	mov	r0, r3
 8002884:	f000 f9f2 	bl	8002c6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699a      	ldr	r2, [r3, #24]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002896:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699a      	ldr	r2, [r3, #24]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6999      	ldr	r1, [r3, #24]
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	021a      	lsls	r2, r3, #8
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	619a      	str	r2, [r3, #24]
      break;
 80028bc:	e041      	b.n	8002942 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68b9      	ldr	r1, [r7, #8]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 fa3b 	bl	8002d40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	69da      	ldr	r2, [r3, #28]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f042 0208 	orr.w	r2, r2, #8
 80028d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	69da      	ldr	r2, [r3, #28]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0204 	bic.w	r2, r2, #4
 80028e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	69d9      	ldr	r1, [r3, #28]
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	61da      	str	r2, [r3, #28]
      break;
 80028fc:	e021      	b.n	8002942 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68b9      	ldr	r1, [r7, #8]
 8002904:	4618      	mov	r0, r3
 8002906:	f000 fa85 	bl	8002e14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	69da      	ldr	r2, [r3, #28]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002918:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	69da      	ldr	r2, [r3, #28]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002928:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	69d9      	ldr	r1, [r3, #28]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	021a      	lsls	r2, r3, #8
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	61da      	str	r2, [r3, #28]
      break;
 800293e:	e000      	b.n	8002942 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002940:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <HAL_TIM_ConfigClockSource+0x18>
 8002968:	2302      	movs	r3, #2
 800296a:	e0b3      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x180>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800298a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002992:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029a4:	d03e      	beq.n	8002a24 <HAL_TIM_ConfigClockSource+0xd0>
 80029a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029aa:	f200 8087 	bhi.w	8002abc <HAL_TIM_ConfigClockSource+0x168>
 80029ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b2:	f000 8085 	beq.w	8002ac0 <HAL_TIM_ConfigClockSource+0x16c>
 80029b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ba:	d87f      	bhi.n	8002abc <HAL_TIM_ConfigClockSource+0x168>
 80029bc:	2b70      	cmp	r3, #112	; 0x70
 80029be:	d01a      	beq.n	80029f6 <HAL_TIM_ConfigClockSource+0xa2>
 80029c0:	2b70      	cmp	r3, #112	; 0x70
 80029c2:	d87b      	bhi.n	8002abc <HAL_TIM_ConfigClockSource+0x168>
 80029c4:	2b60      	cmp	r3, #96	; 0x60
 80029c6:	d050      	beq.n	8002a6a <HAL_TIM_ConfigClockSource+0x116>
 80029c8:	2b60      	cmp	r3, #96	; 0x60
 80029ca:	d877      	bhi.n	8002abc <HAL_TIM_ConfigClockSource+0x168>
 80029cc:	2b50      	cmp	r3, #80	; 0x50
 80029ce:	d03c      	beq.n	8002a4a <HAL_TIM_ConfigClockSource+0xf6>
 80029d0:	2b50      	cmp	r3, #80	; 0x50
 80029d2:	d873      	bhi.n	8002abc <HAL_TIM_ConfigClockSource+0x168>
 80029d4:	2b40      	cmp	r3, #64	; 0x40
 80029d6:	d058      	beq.n	8002a8a <HAL_TIM_ConfigClockSource+0x136>
 80029d8:	2b40      	cmp	r3, #64	; 0x40
 80029da:	d86f      	bhi.n	8002abc <HAL_TIM_ConfigClockSource+0x168>
 80029dc:	2b30      	cmp	r3, #48	; 0x30
 80029de:	d064      	beq.n	8002aaa <HAL_TIM_ConfigClockSource+0x156>
 80029e0:	2b30      	cmp	r3, #48	; 0x30
 80029e2:	d86b      	bhi.n	8002abc <HAL_TIM_ConfigClockSource+0x168>
 80029e4:	2b20      	cmp	r3, #32
 80029e6:	d060      	beq.n	8002aaa <HAL_TIM_ConfigClockSource+0x156>
 80029e8:	2b20      	cmp	r3, #32
 80029ea:	d867      	bhi.n	8002abc <HAL_TIM_ConfigClockSource+0x168>
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d05c      	beq.n	8002aaa <HAL_TIM_ConfigClockSource+0x156>
 80029f0:	2b10      	cmp	r3, #16
 80029f2:	d05a      	beq.n	8002aaa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80029f4:	e062      	b.n	8002abc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6818      	ldr	r0, [r3, #0]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	6899      	ldr	r1, [r3, #8]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f000 faca 	bl	8002f9e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a18:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	609a      	str	r2, [r3, #8]
      break;
 8002a22:	e04e      	b.n	8002ac2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6818      	ldr	r0, [r3, #0]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	6899      	ldr	r1, [r3, #8]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f000 fab3 	bl	8002f9e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a46:	609a      	str	r2, [r3, #8]
      break;
 8002a48:	e03b      	b.n	8002ac2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6818      	ldr	r0, [r3, #0]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	6859      	ldr	r1, [r3, #4]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	461a      	mov	r2, r3
 8002a58:	f000 fa2a 	bl	8002eb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2150      	movs	r1, #80	; 0x50
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 fa81 	bl	8002f6a <TIM_ITRx_SetConfig>
      break;
 8002a68:	e02b      	b.n	8002ac2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6818      	ldr	r0, [r3, #0]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	6859      	ldr	r1, [r3, #4]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	461a      	mov	r2, r3
 8002a78:	f000 fa48 	bl	8002f0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2160      	movs	r1, #96	; 0x60
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 fa71 	bl	8002f6a <TIM_ITRx_SetConfig>
      break;
 8002a88:	e01b      	b.n	8002ac2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	6859      	ldr	r1, [r3, #4]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	461a      	mov	r2, r3
 8002a98:	f000 fa0a 	bl	8002eb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2140      	movs	r1, #64	; 0x40
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 fa61 	bl	8002f6a <TIM_ITRx_SetConfig>
      break;
 8002aa8:	e00b      	b.n	8002ac2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	f000 fa58 	bl	8002f6a <TIM_ITRx_SetConfig>
        break;
 8002aba:	e002      	b.n	8002ac2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002abc:	bf00      	nop
 8002abe:	e000      	b.n	8002ac2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ac0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a29      	ldr	r2, [pc, #164]	; (8002b94 <TIM_Base_SetConfig+0xb8>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d00b      	beq.n	8002b0c <TIM_Base_SetConfig+0x30>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002afa:	d007      	beq.n	8002b0c <TIM_Base_SetConfig+0x30>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a26      	ldr	r2, [pc, #152]	; (8002b98 <TIM_Base_SetConfig+0xbc>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d003      	beq.n	8002b0c <TIM_Base_SetConfig+0x30>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a25      	ldr	r2, [pc, #148]	; (8002b9c <TIM_Base_SetConfig+0xc0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d108      	bne.n	8002b1e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a1c      	ldr	r2, [pc, #112]	; (8002b94 <TIM_Base_SetConfig+0xb8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d00b      	beq.n	8002b3e <TIM_Base_SetConfig+0x62>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b2c:	d007      	beq.n	8002b3e <TIM_Base_SetConfig+0x62>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a19      	ldr	r2, [pc, #100]	; (8002b98 <TIM_Base_SetConfig+0xbc>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d003      	beq.n	8002b3e <TIM_Base_SetConfig+0x62>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a18      	ldr	r2, [pc, #96]	; (8002b9c <TIM_Base_SetConfig+0xc0>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d108      	bne.n	8002b50 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a07      	ldr	r2, [pc, #28]	; (8002b94 <TIM_Base_SetConfig+0xb8>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d103      	bne.n	8002b84 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	615a      	str	r2, [r3, #20]
}
 8002b8a:	bf00      	nop
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr
 8002b94:	40012c00 	.word	0x40012c00
 8002b98:	40000400 	.word	0x40000400
 8002b9c:	40000800 	.word	0x40000800

08002ba0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b087      	sub	sp, #28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	f023 0201 	bic.w	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 0303 	bic.w	r3, r3, #3
 8002bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f023 0302 	bic.w	r3, r3, #2
 8002be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a1c      	ldr	r2, [pc, #112]	; (8002c68 <TIM_OC1_SetConfig+0xc8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d10c      	bne.n	8002c16 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	f023 0308 	bic.w	r3, r3, #8
 8002c02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f023 0304 	bic.w	r3, r3, #4
 8002c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a13      	ldr	r2, [pc, #76]	; (8002c68 <TIM_OC1_SetConfig+0xc8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d111      	bne.n	8002c42 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	621a      	str	r2, [r3, #32]
}
 8002c5c:	bf00      	nop
 8002c5e:	371c      	adds	r7, #28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40012c00 	.word	0x40012c00

08002c6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b087      	sub	sp, #28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	f023 0210 	bic.w	r2, r3, #16
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	021b      	lsls	r3, r3, #8
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f023 0320 	bic.w	r3, r3, #32
 8002cb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	011b      	lsls	r3, r3, #4
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a1d      	ldr	r2, [pc, #116]	; (8002d3c <TIM_OC2_SetConfig+0xd0>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d10d      	bne.n	8002ce8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ce6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a14      	ldr	r2, [pc, #80]	; (8002d3c <TIM_OC2_SetConfig+0xd0>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d113      	bne.n	8002d18 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	621a      	str	r2, [r3, #32]
}
 8002d32:	bf00      	nop
 8002d34:	371c      	adds	r7, #28
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr
 8002d3c:	40012c00 	.word	0x40012c00

08002d40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f023 0303 	bic.w	r3, r3, #3
 8002d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	021b      	lsls	r3, r3, #8
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a1d      	ldr	r2, [pc, #116]	; (8002e10 <TIM_OC3_SetConfig+0xd0>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d10d      	bne.n	8002dba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002da4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	021b      	lsls	r3, r3, #8
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002db8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a14      	ldr	r2, [pc, #80]	; (8002e10 <TIM_OC3_SetConfig+0xd0>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d113      	bne.n	8002dea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	621a      	str	r2, [r3, #32]
}
 8002e04:	bf00      	nop
 8002e06:	371c      	adds	r7, #28
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	40012c00 	.word	0x40012c00

08002e14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b087      	sub	sp, #28
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	021b      	lsls	r3, r3, #8
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	031b      	lsls	r3, r3, #12
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a0f      	ldr	r2, [pc, #60]	; (8002eac <TIM_OC4_SetConfig+0x98>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d109      	bne.n	8002e88 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	019b      	lsls	r3, r3, #6
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	621a      	str	r2, [r3, #32]
}
 8002ea2:	bf00      	nop
 8002ea4:	371c      	adds	r7, #28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr
 8002eac:	40012c00 	.word	0x40012c00

08002eb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	f023 0201 	bic.w	r2, r3, #1
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f023 030a 	bic.w	r3, r3, #10
 8002eec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	621a      	str	r2, [r3, #32]
}
 8002f02:	bf00      	nop
 8002f04:	371c      	adds	r7, #28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr

08002f0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	f023 0210 	bic.w	r2, r3, #16
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	031b      	lsls	r3, r3, #12
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	621a      	str	r2, [r3, #32]
}
 8002f60:	bf00      	nop
 8002f62:	371c      	adds	r7, #28
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr

08002f6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b085      	sub	sp, #20
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f043 0307 	orr.w	r3, r3, #7
 8002f8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	609a      	str	r2, [r3, #8]
}
 8002f94:	bf00      	nop
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr

08002f9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b087      	sub	sp, #28
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	607a      	str	r2, [r7, #4]
 8002faa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fb8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	021a      	lsls	r2, r3, #8
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	609a      	str	r2, [r3, #8]
}
 8002fd2:	bf00      	nop
 8002fd4:	371c      	adds	r7, #28
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr

08002fdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f003 031f 	and.w	r3, r3, #31
 8002fee:	2201      	movs	r2, #1
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a1a      	ldr	r2, [r3, #32]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	401a      	ands	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6a1a      	ldr	r2, [r3, #32]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f003 031f 	and.w	r3, r3, #31
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	fa01 f303 	lsl.w	r3, r1, r3
 8003014:	431a      	orrs	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	621a      	str	r2, [r3, #32]
}
 800301a:	bf00      	nop
 800301c:	371c      	adds	r7, #28
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003038:	2302      	movs	r3, #2
 800303a:	e046      	b.n	80030ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003062:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	4313      	orrs	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a16      	ldr	r2, [pc, #88]	; (80030d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d00e      	beq.n	800309e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003088:	d009      	beq.n	800309e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a12      	ldr	r2, [pc, #72]	; (80030d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d004      	beq.n	800309e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a10      	ldr	r2, [pc, #64]	; (80030dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d10c      	bne.n	80030b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr
 80030d4:	40012c00 	.word	0x40012c00
 80030d8:	40000400 	.word	0x40000400
 80030dc:	40000800 	.word	0x40000800

080030e0 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	460b      	mov	r3, r1
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e05f      	b.n	80031b8 <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d106      	bne.n	8003112 <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f7fd ff67 	bl	8000fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2224      	movs	r2, #36	; 0x24
 8003116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003128:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 f848 	bl	80031c0 <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691a      	ldr	r2, [r3, #16]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800313e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695a      	ldr	r2, [r3, #20]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800314e:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691a      	ldr	r2, [r3, #16]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 020f 	bic.w	r2, r2, #15
 800315e:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6919      	ldr	r1, [r3, #16]
 8003166:	7afa      	ldrb	r2, [r7, #11]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800317e:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68d9      	ldr	r1, [r3, #12]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	430a      	orrs	r2, r1
 800318e:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800319e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2220      	movs	r2, #32
 80031aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031fa:	f023 030c 	bic.w	r3, r3, #12
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6812      	ldr	r2, [r2, #0]
 8003202:	68b9      	ldr	r1, [r7, #8]
 8003204:	430b      	orrs	r3, r1
 8003206:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699a      	ldr	r2, [r3, #24]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a2c      	ldr	r2, [pc, #176]	; (80032d4 <UART_SetConfig+0x114>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d103      	bne.n	8003230 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003228:	f7fe fe8e 	bl	8001f48 <HAL_RCC_GetPCLK2Freq>
 800322c:	60f8      	str	r0, [r7, #12]
 800322e:	e002      	b.n	8003236 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003230:	f7fe fe76 	bl	8001f20 <HAL_RCC_GetPCLK1Freq>
 8003234:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	009a      	lsls	r2, r3, #2
 8003240:	441a      	add	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	fbb2 f3f3 	udiv	r3, r2, r3
 800324c:	4a22      	ldr	r2, [pc, #136]	; (80032d8 <UART_SetConfig+0x118>)
 800324e:	fba2 2303 	umull	r2, r3, r2, r3
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	0119      	lsls	r1, r3, #4
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	4613      	mov	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	009a      	lsls	r2, r3, #2
 8003260:	441a      	add	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	fbb2 f2f3 	udiv	r2, r2, r3
 800326c:	4b1a      	ldr	r3, [pc, #104]	; (80032d8 <UART_SetConfig+0x118>)
 800326e:	fba3 0302 	umull	r0, r3, r3, r2
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	2064      	movs	r0, #100	; 0x64
 8003276:	fb00 f303 	mul.w	r3, r0, r3
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	3332      	adds	r3, #50	; 0x32
 8003280:	4a15      	ldr	r2, [pc, #84]	; (80032d8 <UART_SetConfig+0x118>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800328c:	4419      	add	r1, r3
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	4613      	mov	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	009a      	lsls	r2, r3, #2
 8003298:	441a      	add	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80032a4:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <UART_SetConfig+0x118>)
 80032a6:	fba3 0302 	umull	r0, r3, r3, r2
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	2064      	movs	r0, #100	; 0x64
 80032ae:	fb00 f303 	mul.w	r3, r0, r3
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	3332      	adds	r3, #50	; 0x32
 80032b8:	4a07      	ldr	r2, [pc, #28]	; (80032d8 <UART_SetConfig+0x118>)
 80032ba:	fba2 2303 	umull	r2, r3, r2, r3
 80032be:	095b      	lsrs	r3, r3, #5
 80032c0:	f003 020f 	and.w	r2, r3, #15
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	440a      	add	r2, r1
 80032ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032cc:	bf00      	nop
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40013800 	.word	0x40013800
 80032d8:	51eb851f 	.word	0x51eb851f

080032dc <__libc_init_array>:
 80032dc:	b570      	push	{r4, r5, r6, lr}
 80032de:	2600      	movs	r6, #0
 80032e0:	4d0c      	ldr	r5, [pc, #48]	; (8003314 <__libc_init_array+0x38>)
 80032e2:	4c0d      	ldr	r4, [pc, #52]	; (8003318 <__libc_init_array+0x3c>)
 80032e4:	1b64      	subs	r4, r4, r5
 80032e6:	10a4      	asrs	r4, r4, #2
 80032e8:	42a6      	cmp	r6, r4
 80032ea:	d109      	bne.n	8003300 <__libc_init_array+0x24>
 80032ec:	f000 f822 	bl	8003334 <_init>
 80032f0:	2600      	movs	r6, #0
 80032f2:	4d0a      	ldr	r5, [pc, #40]	; (800331c <__libc_init_array+0x40>)
 80032f4:	4c0a      	ldr	r4, [pc, #40]	; (8003320 <__libc_init_array+0x44>)
 80032f6:	1b64      	subs	r4, r4, r5
 80032f8:	10a4      	asrs	r4, r4, #2
 80032fa:	42a6      	cmp	r6, r4
 80032fc:	d105      	bne.n	800330a <__libc_init_array+0x2e>
 80032fe:	bd70      	pop	{r4, r5, r6, pc}
 8003300:	f855 3b04 	ldr.w	r3, [r5], #4
 8003304:	4798      	blx	r3
 8003306:	3601      	adds	r6, #1
 8003308:	e7ee      	b.n	80032e8 <__libc_init_array+0xc>
 800330a:	f855 3b04 	ldr.w	r3, [r5], #4
 800330e:	4798      	blx	r3
 8003310:	3601      	adds	r6, #1
 8003312:	e7f2      	b.n	80032fa <__libc_init_array+0x1e>
 8003314:	08003374 	.word	0x08003374
 8003318:	08003374 	.word	0x08003374
 800331c:	08003374 	.word	0x08003374
 8003320:	08003378 	.word	0x08003378

08003324 <memset>:
 8003324:	4603      	mov	r3, r0
 8003326:	4402      	add	r2, r0
 8003328:	4293      	cmp	r3, r2
 800332a:	d100      	bne.n	800332e <memset+0xa>
 800332c:	4770      	bx	lr
 800332e:	f803 1b01 	strb.w	r1, [r3], #1
 8003332:	e7f9      	b.n	8003328 <memset+0x4>

08003334 <_init>:
 8003334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003336:	bf00      	nop
 8003338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800333a:	bc08      	pop	{r3}
 800333c:	469e      	mov	lr, r3
 800333e:	4770      	bx	lr

08003340 <_fini>:
 8003340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003342:	bf00      	nop
 8003344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003346:	bc08      	pop	{r3}
 8003348:	469e      	mov	lr, r3
 800334a:	4770      	bx	lr
